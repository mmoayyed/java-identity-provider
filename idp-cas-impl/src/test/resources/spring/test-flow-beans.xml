<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean id="shibboleth.StorageService"
        class="org.opensaml.storage.impl.MemoryStorageService" />

    <bean id="shibboleth.HttpServletRequestSupplier" destroy-method=""
        class="net.shibboleth.shared.servlet.impl.ThreadLocalHttpServletRequestSupplier" />

    <bean id="shibboleth.HttpServletResponseSupplier" destroy-method=""
        class="net.shibboleth.shared.servlet.impl.ThreadLocalHttpServletResponseSupplier" />

    <bean id="shibboleth.CookieManager"
        class="net.shibboleth.shared.net.CookieManager"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:httpServletResponseSupplier-ref="shibboleth.HttpServletResponseSupplier"
        p:secure="false" />

    <bean id="shibboleth.SessionIDGenerator" destroy-method=""
            class="net.shibboleth.shared.security.IdentifierGenerationStrategy" factory-method="getInstance">
        <constructor-arg>
            <util:constant
                static-field="net.shibboleth.shared.security.IdentifierGenerationStrategy.ProviderType.SECURE" />
        </constructor-arg>
    </bean>

    <bean id="shibboleth.SessionManager"
          class="net.shibboleth.idp.session.impl.StorageBackedSessionManager"
          p:cookieManager-ref="shibboleth.CookieManager"
          p:storageService-ref="shibboleth.StorageService"
          p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
          p:consistentAddress="true"
          p:sessionTimeout="PT60M"
          p:sessionSlop="0"
          p:maskStorageFailure="false"
          p:trackSPSessions="false"
          p:secondaryServiceIndex="false"
          p:IDGenerator-ref="shibboleth.SessionIDGenerator" />

    <bean id="shibboleth.CASTicketService" destroy-method=""
          class="net.shibboleth.idp.cas.ticket.impl.EncodingTicketService"
          c:service-ref="shibboleth.StorageService"
          c:sealer-ref="encodedTicketSealer" />

    <bean id="encodedTicketSealer" lazy-init="true"
          class="net.shibboleth.shared.security.DataSealer"
          p:keyStrategy-ref="keyStrategy" />

    <bean id="keyStrategy" destroy-method=""
        class="net.shibboleth.idp.cas.flow.impl.AbstractFlowActionTest.MockDataSealerKeyStrategy" />

    <bean id="shibboleth.CASServiceRegistry"
          class="net.shibboleth.idp.cas.service.PatternServiceRegistry">
        <property name="definitions">
            <list>
                <bean destroy-method=""
                    class="net.shibboleth.idp.cas.service.ServiceDefinition"
                    c:regex="https://([A-Za-z0-9_-]+\.)*example\.org(:\d+)?/.*"
                    p:group="allowedToProxy"
                    p:authorizedToProxy="true" />
                <bean destroy-method=""
                    class="net.shibboleth.idp.cas.service.ServiceDefinition"
                    c:regex="http://([A-Za-z0-9_-]+\.)*example\.org(:\d+)?/.*"
                    p:group="notAllowedToProxy"
                    p:authorizedToProxy="false" />
            </list>
        </property>
    </bean>

    <util:list id="shibboleth.DefaultCASServiceRegistries">
        <ref bean="shibboleth.CASServiceRegistry" />
    </util:list>

    <util:list id="shibboleth.CASProxyTrustedCertificates" value-type="java.lang.String">
        <value>classpath:/credentials/localhost.pem</value>
    </util:list>

    <bean id="shibboleth.MetadataCredentialResolver" destroy-method=""
          class="org.opensaml.saml.security.impl.MetadataCredentialResolver"
          p:roleDescriptorResolver-ref="shibboleth.RoleDescriptorResolver"
          p:keyInfoCredentialResolver-ref="shibboleth.KeyInfoCredentialResolver">
    </bean>

    <bean id="shibboleth.KeyInfoCredentialResolver" destroy-method=""
          class="org.opensaml.xmlsec.config.impl.DefaultSecurityConfigurationBootstrap"
          factory-method="buildBasicInlineKeyInfoCredentialResolver" />

    <bean id="shibboleth.MetadataResolver"
          class="org.opensaml.saml.metadata.resolver.impl.FilesystemMetadataResolver"
          p:parserPool-ref="shibboleth.ParserPool">
        <constructor-arg>
            <bean destroy-method="" class="java.io.File"
                c:pathname="src/test/resources/metadata/cas-test-metadata.xml" />
        </constructor-arg>
    </bean>

    <bean id="shibboleth.RoleDescriptorResolver"
          class="org.opensaml.saml.metadata.resolver.impl.PredicateRoleDescriptorResolver"
          c:mdResolver-ref="shibboleth.MetadataResolver" />

    <bean id="shibboleth.OpenSAMLConfig" class="net.shibboleth.profile.spring.impl.OpenSAMLConfigBean"
          depends-on="shibboleth.ParserPool"
          p:parserPool-ref="shibboleth.ParserPool" />

    <bean id="shibboleth.ParserPool" class="net.shibboleth.shared.xml.impl.BasicParserPool"
          p:maxPoolSize="100"
          p:coalescing="true"
          p:ignoreComments="true"
          p:ignoreElementContentWhitespace="true"
          p:namespaceAware="true"
          p:securityManagerAttributeName="http://apache.org/xml/properties/security-manager">
        <property name="builderFeatures">
            <map>
                <entry key="http://apache.org/xml/features/disallow-doctype-decl">
                    <util:constant static-field="java.lang.Boolean.TRUE" />
                </entry>
                <entry key="http://apache.org/xml/features/validation/schema/normalized-value">
                    <util:constant static-field="java.lang.Boolean.FALSE" />
                </entry>
                <entry key="http://javax.xml.XMLConstants/feature/secure-processing">
                    <util:constant static-field="java.lang.Boolean.TRUE" />
                </entry>
            </map>
        </property>
    </bean>

    <bean id="shibboleth.InternalHttpClient" destroy-method=""
        class="net.shibboleth.spring.http.HttpClientFactoryBean"
        p:connectionDisregardTLSCertificate="false"
        p:connectionTimeout="PT1M"
        p:connectionRequestTimeout="PT1M"
        p:socketTimeout="PT1M"
        p:maxConnectionsTotal="10"
        p:maxConnectionsPerRoute="10" />

    <bean id="shibboleth.SecurityEnhancedTLSSocketFactory" name="shibboleth.TrustEngineTLSSocketFactory"
          lazy-init="true" destroy-method=""
          class="org.opensaml.security.httpclient.impl.SecurityEnhancedHttpClientSupport"
          factory-method="buildTLSSocketFactory" />

    <bean id="proxyHttpClient" parent="shibboleth.InternalHttpClient" destroy-method=""
          p:tLSSocketFactory-ref="shibboleth.SecurityEnhancedTLSSocketFactory" />

    <bean id="shibboleth.StaticPKIXTrustEngine" abstract="true"
          class="org.opensaml.spring.trust.StaticPKIXFactoryBean" />

    <bean id="proxyHttpSecurity" destroy-method=""
            class="org.opensaml.security.httpclient.HttpClientSecurityParameters">
        <property name="tLSTrustEngine">
            <bean destroy-method="" class="org.opensaml.security.trust.impl.ChainingTrustEngine">
                <constructor-arg name="chain">
                    <list>
                        <bean destroy-method=""
                            class="org.opensaml.security.trust.impl.ExplicitX509CertificateTrustEngine"
                            c:resolver-ref="shibboleth.MetadataCredentialResolver" />
                        <bean parent="shibboleth.StaticPKIXTrustEngine"
                            p:certificates="#{getObject('shibboleth.CASProxyTrustedCertificates') ?: getObject('shibboleth.DefaultCASProxyTrustedCertificates')}"
                            p:checkNames="false" />
                    </list>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="proxyValidator" destroy-method=""
          class="net.shibboleth.idp.cas.proxy.impl.HttpClientProxyValidator"
          c:client-ref="proxyHttpClient"
          c:parameters-ref="proxyHttpSecurity" />


    <!-- Flow beans -->
    <bean id="buildProxyChainAction"
          class="net.shibboleth.idp.cas.flow.impl.BuildProxyChainAction"
          c:ticketService-ref="shibboleth.CASTicketService" />

    <bean id="buildRelyingPartyContextAction"
          class="net.shibboleth.idp.cas.flow.impl.BuildRelyingPartyContextAction"
          c:registries-ref="shibboleth.DefaultCASServiceRegistries" />

    <bean id="buildSAMLMetadataContextAction"
          class="net.shibboleth.idp.cas.flow.impl.BuildSAMLMetadataContextAction" />

    <bean id="checkProxyAuthorizationAction"
          class="net.shibboleth.idp.cas.flow.impl.CheckProxyAuthorizationAction" />

    <bean id="grantProxyTicketAction"
          class="net.shibboleth.idp.cas.flow.impl.GrantProxyTicketAction"
          c:ticketService-ref="shibboleth.CASTicketService"
          c:resolver-ref="shibboleth.SessionManager" />

    <bean id="grantServiceTicketAction"
          class="net.shibboleth.idp.cas.flow.impl.GrantServiceTicketAction"
          c:ticketService-ref="shibboleth.CASTicketService" />

    <bean id="validateProxyCallbackAction"
          class="net.shibboleth.idp.cas.flow.impl.ValidateProxyCallbackAction"
          c:validator-ref="proxyValidator"
          c:ticketService-ref="shibboleth.CASTicketService" />

    <bean id="validateRenewAction"
          class="net.shibboleth.idp.cas.flow.impl.ValidateRenewAction" />

    <bean id="validateTicketAction"
          class="net.shibboleth.idp.cas.flow.impl.ValidateTicketAction"
          c:ticketService-ref="shibboleth.CASTicketService" />
</beans>
