<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean id="shibboleth.SessionIDGenerator" destroy-method=""
            class="net.shibboleth.shared.security.IdentifierGenerationStrategy" factory-method="getInstance">
        <constructor-arg>
            <util:constant
                static-field="net.shibboleth.shared.security.IdentifierGenerationStrategy.ProviderType.SECURE" />
        </constructor-arg>
        <constructor-arg>
            <bean class="net.shibboleth.shared.security.RandomIdentifierParameterSpec"
                    c:identifierSize="%{idp.session.idSize:32}">
                <constructor-arg name="source">
                    <null/>
                </constructor-arg>
                <constructor-arg name="identifierEncoder">
                    <null/>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Dummy bean for compatibility, this is no longer a supported extensions point. -->
    <bean id="shibboleth.DefaultSessionTypeProtocolMap" lazy-init="true"
            class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map/>
        </property>
    </bean>

    <!-- SPSession serializers. -->
    
    <bean id="shibboleth.SPSessionSerializer" abstract="true"
        class="net.shibboleth.idp.session.SPSessionSerializerRegistry.Entry" />

    <bean parent="shibboleth.SPSessionSerializer" c:claz="net.shibboleth.idp.session.BasicSPSession">
        <constructor-arg name="object">
            <bean class="net.shibboleth.idp.session.impl.BasicSPSessionSerializer"
                c:offset="%{idp.session.slop:PT0S}" />
        </constructor-arg>
    </bean>

    <bean parent="shibboleth.SPSessionSerializer" c:claz="net.shibboleth.idp.saml.session.SAML1SPSession">
        <constructor-arg name="object">
            <bean class="net.shibboleth.idp.saml.session.impl.SAML1SPSessionSerializer"
                c:offset="%{idp.session.slop:PT0S}" />
        </constructor-arg>
    </bean>

    <bean parent="shibboleth.SPSessionSerializer" c:claz="net.shibboleth.idp.saml.session.SAML2SPSession">
        <constructor-arg name="object">
            <bean class="net.shibboleth.idp.saml.session.impl.SAML2SPSessionSerializer"
                c:offset="%{idp.session.slop:PT0S}"
                p:parserPool-ref="shibboleth.ParserPool"
                depends-on="shibboleth.OpenSAMLConfig" />
        </constructor-arg>
    </bean>

    <bean parent="shibboleth.SPSessionSerializer" c:claz="net.shibboleth.idp.cas.session.impl.CASSPSession">
        <constructor-arg name="object">
            <bean class="net.shibboleth.idp.cas.session.impl.CASSPSessionSerializer"
                c:offset="%{idp.session.slop:PT0S}" />
        </constructor-arg>
    </bean>

    <bean id="shibboleth.DefaultSPSessionSerializerRegistry" class="net.shibboleth.idp.session.SPSessionSerializerRegistry" />
    
    <bean id="shibboleth.SessionManager" class="net.shibboleth.idp.session.impl.StorageBackedSessionManager"
        depends-on="shibboleth.OpenSAMLConfig"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:authenticationFlowDescriptors="#{@'shibboleth.AuthenticationFlowDescriptorManager'.getComponents()}"
        p:cookieName="%{idp.session.cookieName:__Host-shib_idp_session}"
        p:cookieManager-ref="#{%{idp.session.persistent:false} ? 'shibboleth.PersistentCookieManager' : 'shibboleth.CookieManager'}"
        p:storageService-ref="#{'%{idp.session.StorageService:}'.isEmpty() ?
            (%{idp.session.persistent:false} ? 'shibboleth.ClientPersistentStorageService' : 'shibboleth.ClientSessionStorageService')
                : '%{idp.session.StorageService:}'.trim()}"
        p:consistentAddressCondition="#{getObject('%{idp.session.consistentAddressCondition:}'.trim()) ?:
            T(net.shibboleth.idp.session.impl.StorageBackedSessionManager.DefaultConsistentAddressConditionFactory).getDefaultConsistentAddressCondition(%{idp.session.consistentAddress:true})}"
        p:sessionTimeout="%{idp.session.timeout:PT60M}"
        p:sessionSlop="%{idp.session.slop:PT0S}"
        p:maskStorageFailure="%{idp.session.maskStorageFailure:false}"
        p:trackSPSessions="%{idp.session.trackSPSessions:false}"
        p:secondaryServiceIndex="%{idp.session.secondaryServiceIndex:false}"
        p:IDGenerator-ref="shibboleth.SessionIDGenerator"
        p:SPSessionSerializerRegistry="#{getObject('shibboleth.SPSessionSerializerRegistry') ?: getObject('shibboleth.DefaultSPSessionSerializerRegistry')}" />

    <!-- Management bean to collect and expose LogoutPropagationFlowDescriptors. -->
    
    <bean id="shibboleth.LogoutPropagationFlowDescriptorManager"
        class="net.shibboleth.idp.session.impl.LogoutPropagationFlowDescriptorManager"
        p:components="#{getObject('shibboleth.LogoutPropagationFlows')}" />

    <!-- Built-in logout propagation flows. -->

    <!-- These bean IDs have to be set (vs. just p:id) because the original config ref'd them. -->

    <bean id="logoutprop/cas" class="net.shibboleth.idp.session.LogoutPropagationFlowDescriptor"
          c:_0="net.shibboleth.idp.cas.session.impl.CASSPSession" />

    <bean id="logoutprop/saml2" class="net.shibboleth.idp.session.LogoutPropagationFlowDescriptor"
          c:_0="net.shibboleth.idp.saml.session.SAML2SPSession" />

    <!-- Selector function used in logout-propagation UI and logout-propagation driver flow -->

    <bean id="shibboleth.LogoutPropagationFlowSelector" depends-on="shibboleth.LogoutPropagationFlowDescriptorManager"
          class="net.shibboleth.idp.session.logic.LogoutPropagationFlowDescriptorSelector"
          c:flows="#{@'shibboleth.LogoutPropagationFlowDescriptorManager'.getComponents()}" />

    <!-- The import is at the bottom to avoid a depends-on in a user-editable file. -->
    <import resource="conditional:${idp.home}/conf/session-manager.xml" />

</beans>
