<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

	<import resource="${idp.home}/conf/authn/authn-comparison.xml" />
	<import resource="conditional:${idp.home}/conf/authn/general-authn.xml" />

    <!-- A parent bean to default some of the flow boilerplate. -->

    <bean id="shibboleth.AuthenticationFlow" abstract="true"
            class="net.shibboleth.idp.authn.AuthenticationFlowDescriptor"
            p:resultSerializer-ref="shibboleth.DefaultAuthenticationResultSerializer"
            p:nonBrowserSupported="true"
            p:passiveAuthenticationSupported="false"
            p:forcedAuthenticationSupported="false"
            p:proxyRestrictionsEnforced="%{idp.authn.enforceProxyRestrictions:true}"
            p:lifetime="%{idp.authn.defaultLifetime:PT60M}"
            p:inactivityTimeout="%{idp.authn.defaultTimeout:PT30M}"
            p:principalWeightMap="#{getObject('shibboleth.AuthenticationPrincipalWeightMap') ?: getObject('shibboleth.DefaultAuthenticationPrincipalWeightMap')}"
            p:principalServiceManager-ref="shibboleth.PrincipalServiceManager"
            p:revocationCondition="#{%{idp.authn.revocation:false} ? getObject('%{idp.authn.revocation.Condition:shibboleth.RevocationCacheCondition}'.trim()) : null}">
        <property name="supportedPrincipals">
            <list>
                <bean parent="shibboleth.SAML2AuthnContextClassRef"
                    c:classRef="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport" />
                <bean parent="shibboleth.SAML2AuthnContextClassRef"
                    c:classRef="urn:oasis:names:tc:SAML:2.0:ac:classes:Password" />
                <bean parent="shibboleth.SAML1AuthenticationMethod"
                    c:method="urn:oasis:names:tc:SAML:1.0:am:password" />
            </list>
        </property>
    </bean>

    <!-- Defaulted flows. -->
    
    <bean p:id="authn/Password" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.Password.order:1000}"
            p:nonBrowserSupported="%{idp.authn.Password.nonBrowserSupported:true}"
            p:passiveAuthenticationSupported="%{idp.authn.Password.passiveAuthenticationSupported:true}"
            p:forcedAuthenticationSupported="%{idp.authn.Password.forcedAuthenticationSupported:true}"
            p:proxyRestrictionsEnforced="%{idp.authn.Password.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.Password.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.Password.discoveryRequired:false}"
            p:lifetime="%{idp.authn.Password.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.Password.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.Password.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.Password.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.Password.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.Password.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>
    
    <bean p:id="authn/IPAddress" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.IPAddress.order:1000}"
            p:nonBrowserSupported="%{idp.authn.IPAddress.nonBrowserSupported:true}"
            p:passiveAuthenticationSupported="%{idp.authn.IPAddress.passiveAuthenticationSupported:true}"
            p:forcedAuthenticationSupported="%{idp.authn.IPAddress.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.IPAddress.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.IPAddress.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.IPAddress.discoveryRequired:false}"
            p:lifetime="%{idp.authn.IPAddress.lifetime:PT60S}"
            p:inactivityTimeout="%{idp.authn.IPAddress.inactivityTimeout:PT60S}"
            p:reuseCondition-ref="#{'%{idp.authn.IPAddress.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.IPAddress.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.IPAddress.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.IPAddress.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <bean p:id="authn/Function" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.Function.order:1000}"
            p:nonBrowserSupported="%{idp.authn.Function.nonBrowserSupported:true}"
            p:passiveAuthenticationSupported="%{idp.authn.Function.passiveAuthenticationSupported:true}"
            p:forcedAuthenticationSupported="%{idp.authn.Function.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.Function.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.Function.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.Function.discoveryRequired:false}"
            p:lifetime="%{idp.authn.Function.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.Function.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.Function.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.Function.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.Function.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.Function.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <bean p:id="authn/External" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.External.order:1000}"
            p:nonBrowserSupported="%{idp.authn.External.nonBrowserSupported:false}"
            p:passiveAuthenticationSupported="%{idp.authn.External.passiveAuthenticationSupported:false}"
            p:forcedAuthenticationSupported="%{idp.authn.External.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.External.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.External.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.External.discoveryRequired:false}"
            p:lifetime="%{idp.authn.External.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.External.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.External.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.External.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.External.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.External.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>
        
    <bean p:id="authn/RemoteUser" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.RemoteUser.order:1000}"
            p:nonBrowserSupported="%{idp.authn.RemoteUser.nonBrowserSupported:false}"
            p:passiveAuthenticationSupported="%{idp.authn.RemoteUser.passiveAuthenticationSupported:false}"
            p:forcedAuthenticationSupported="%{idp.authn.RemoteUser.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.RemoteUser.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.RemoteUser.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.RemoteUser.discoveryRequired:false}"
            p:lifetime="%{idp.authn.RemoteUser.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.RemoteUser.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.RemoteUser.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.RemoteUser.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.RemoteUser.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.RemoteUser.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>
    
    <bean p:id="authn/RemoteUserInternal" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.RemoteUserInternal.order:1000}"
            p:nonBrowserSupported="%{idp.authn.RemoteUserInternal.nonBrowserSupported:true}"
            p:passiveAuthenticationSupported="%{idp.authn.RemoteUserInternal.passiveAuthenticationSupported:false}"
            p:forcedAuthenticationSupported="%{idp.authn.RemoteUserInternal.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.RemoteUserInternal.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.RemoteUserInternal.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.RemoteUserInternal.discoveryRequired:false}"
            p:lifetime="%{idp.authn.RemoteUserInternal.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.RemoteUserInternal.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.RemoteUserInternal.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.RemoteUserInternal.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.RemoteUserInternal.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.RemoteUserInternal.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <bean p:id="authn/SAML" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.SAML.order:1000}"
            p:nonBrowserSupported="%{idp.authn.SAML.nonBrowserSupported:false}"
            p:passiveAuthenticationSupported="%{idp.authn.SAML.passiveAuthenticationSupported:true}"
            p:forcedAuthenticationSupported="%{idp.authn.SAML.forcedAuthenticationSupported:true}"
            p:proxyRestrictionsEnforced="%{idp.authn.SAML.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.SAML.proxyScopingEnforced:true}"
            p:discoveryRequired="%{idp.authn.SAML.discoveryRequired:true}"
            p:lifetime="%{idp.authn.SAML.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.SAML.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.SAML.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.SAML.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.SAML.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.SAML.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>
            
    <bean p:id="authn/SPNEGO" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.SPNEGO.order:1000}"
            p:nonBrowserSupported="%{idp.authn.SPNEGO.nonBrowserSupported:false}"
            p:passiveAuthenticationSupported="%{idp.authn.SPNEGO.passiveAuthenticationSupported:false}"
            p:forcedAuthenticationSupported="%{idp.authn.SPNEGO.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.SPNEGO.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.SPNEGO.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.SPNEGO.discoveryRequired:false}"
            p:lifetime="%{idp.authn.SPNEGO.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.SPNEGO.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.SPNEGO.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.SPNEGO.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.SPNEGO.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.SPNEGO.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <bean p:id="authn/X509" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.X509.order:1000}"
            p:nonBrowserSupported="%{idp.authn.X509.nonBrowserSupported:false}"
            p:passiveAuthenticationSupported="%{idp.authn.X509.passiveAuthenticationSupported:false}"
            p:forcedAuthenticationSupported="%{idp.authn.X509.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.X509.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.X509.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.X509.discoveryRequired:false}"
            p:lifetime="%{idp.authn.X509.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.X509.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.X509.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.X509.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.X509.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.X509.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <bean p:id="authn/X509Internal" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.X509Internal.order:1000}"
            p:nonBrowserSupported="%{idp.authn.X509Internal.nonBrowserSupported:false}"
            p:passiveAuthenticationSupported="%{idp.authn.X509Internal.passiveAuthenticationSupported:false}"
            p:forcedAuthenticationSupported="%{idp.authn.X509Internal.forcedAuthenticationSupported:false}"
            p:proxyRestrictionsEnforced="%{idp.authn.X509Internal.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.X509Internal.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.X509Internal.discoveryRequired:false}"
            p:lifetime="%{idp.authn.X509Internal.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.X509Internal.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.X509Internal.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.X509Internal.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.X509Internal.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.X509Internal.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <bean p:id="authn/MFA" parent="shibboleth.AuthenticationFlow"
            p:order="%{idp.authn.MFA.order:1000}"
            p:nonBrowserSupported="%{idp.authn.MFA.nonBrowserSupported:true}"
            p:passiveAuthenticationSupported="%{idp.authn.MFA.passiveAuthenticationSupported:true}"
            p:forcedAuthenticationSupported="%{idp.authn.MFA.forcedAuthenticationSupported:true}"
            p:proxyRestrictionsEnforced="%{idp.authn.MFA.proxyRestrictionsEnforced:%{idp.authn.enforceProxyRestrictions:true}}"
            p:proxyScopingEnforced="%{idp.authn.MFA.proxyScopingEnforced:false}"
            p:discoveryRequired="%{idp.authn.MFA.discoveryRequired:false}"
            p:lifetime="%{idp.authn.MFA.lifetime:%{idp.authn.defaultLifetime:PT1H}}"
            p:inactivityTimeout="%{idp.authn.MFA.inactivityTimeout:%{idp.authn.defaultTimeout:PT30M}}"
            p:reuseCondition-ref="#{'%{idp.authn.MFA.reuseCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:activationCondition-ref="#{'%{idp.authn.MFA.activationCondition:shibboleth.Conditions.TRUE}'.trim()}"
            p:subjectDecorator="#{getObject('%{idp.authn.MFA.subjectDecorator:}'.trim())}">
        <property name="supportedPrincipalsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.authn.MFA.supportedPrincipals:}'.trim()}" />
        </property>
    </bean>

    <!-- Management bean to collect and expose AuthenticationFlowDescriptors. -->
    
    <bean id="shibboleth.AuthenticationFlowDescriptorManager"
        class="net.shibboleth.idp.authn.impl.AuthenticationFlowDescriptorManager"
        p:components="#{getObject('shibboleth.AvailableAuthenticationFlows')}" />

    <!-- Default weighting if not overridden. -->
    <util:map id="shibboleth.DefaultAuthenticationPrincipalWeightMap">
        <entry>
            <key>
                <bean parent="shibboleth.SAML2AuthnContextClassRef"
                    c:classRef="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport" />
            </key>
            <value>1</value>
        </entry>
    </util:map>

    <bean id="shibboleth.GenericPrincipalSerializer" class="net.shibboleth.idp.authn.principal.GenericPrincipalSerializer"
        p:symbolics="#{getObject('shibboleth.PrincipalSymbolics') ?: getObject('shibboleth.DefaultPrincipalSymbolics')}" />
    
    <!-- The serializer machinery injected into authentication flows by default. -->
    <bean id="shibboleth.DefaultAuthenticationResultSerializer"
        class="net.shibboleth.idp.authn.impl.DefaultAuthenticationResultSerializer"
        c:_0-ref="shibboleth.PrincipalServiceManager"
        c:_1-ref="shibboleth.GenericPrincipalSerializer" />

    <!-- Dummy bean for compatibility, this is no longer a supported extensions point. -->
    <bean id="shibboleth.DefaultPrincipalSerializers" class="org.springframework.beans.factory.config.ListFactoryBean"
            lazy-init="true">
        <property name="sourceList">
            <list/>
        </property>
    </bean>

    <!-- PrincipalServiceManager for auto-registration of PrincipalService beans. -->
    <bean id="shibboleth.PrincipalServiceManager" class="net.shibboleth.idp.authn.principal.PrincipalServiceManager" />
    
    <!-- Built-in PrincipalService beans. -->

    <bean p:id="saml1" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
        c:claz="net.shibboleth.idp.saml.authn.principal.AuthenticationMethodPrincipal"
        c:serializer-ref="shibboleth.GenericPrincipalSerializer" />
    <bean p:id="saml2" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
        c:claz="net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal"
        c:serializer-ref="shibboleth.GenericPrincipalSerializer" />
    <bean p:id="saml2declref" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
        c:claz="net.shibboleth.idp.saml.authn.principal.AuthnContextDeclRefPrincipal"
        c:serializer-ref="shibboleth.GenericPrincipalSerializer" />

    <bean p:id="nameid" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="net.shibboleth.idp.saml.authn.principal.NameIDPrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.saml.authn.principal.impl.NameIDPrincipalSerializer"
                depends-on="shibboleth.OpenSAMLConfig" />
        </constructor-arg>
    </bean>        
    
    <bean p:id="username" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="net.shibboleth.idp.authn.principal.UsernamePrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.SimplePrincipalSerializer"
                c:claz="net.shibboleth.idp.authn.principal.UsernamePrincipal" c:name="U" />
        </constructor-arg>
    </bean>

    <bean p:id="password" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="net.shibboleth.idp.authn.principal.PasswordPrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.SealedPrincipalSerializer"
                c:claz="net.shibboleth.idp.authn.principal.PasswordPrincipal" c:name="PW"
                p:dataSealer="#{(environment.containsProperty('idp.sealer.storeResource') or environment.containsProperty('idp.sealer.keyStrategy')) ? getObject('shibboleth.DataSealer') : null}" />
        </constructor-arg>
    </bean>

    <bean p:id="totp" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="net.shibboleth.idp.authn.principal.TOTPPrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.SimplePrincipalSerializer"
                c:claz="net.shibboleth.idp.authn.principal.TOTPPrincipal" c:name="TOTP" />
        </constructor-arg>
    </bean>

    <bean p:id="ldap" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="org.ldaptive.jaas.LdapPrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.impl.LDAPPrincipalSerializer" />
        </constructor-arg>
    </bean>

    <bean p:id="attr" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="net.shibboleth.idp.authn.principal.IdPAttributePrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.impl.IdPAttributePrincipalSerializer" />
        </constructor-arg>
    </bean>

    <bean p:id="proxy" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="net.shibboleth.idp.authn.principal.ProxyAuthenticationPrincipal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.impl.ProxyAuthenticationPrincipalSerializer" />
        </constructor-arg>
    </bean>

    <bean p:id="x500" class="net.shibboleth.idp.authn.principal.GenericPrincipalService"
            c:claz="javax.security.auth.x500.X500Principal">
        <constructor-arg name="serializer">
            <bean class="net.shibboleth.idp.authn.principal.impl.X500PrincipalSerializer" />
        </constructor-arg>
    </bean>
    
    <!--
    Defining this allows us to specify symbolic text replacements that shrink the size of results
    saved to client-side storage such as cookies.
    -->
    <bean id="shibboleth.DefaultPrincipalSymbolics"
            class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <!-- Custom principal types. -->
                <entry key="net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal" value="1" />
                <entry key="net.shibboleth.idp.saml.authn.principal.AuthnContextDeclRefPrincipal" value="2" />
                <entry key="net.shibboleth.idp.saml.authn.principal.AuthenticationMethodPrincipal" value="3" />
                <entry key="javax.security.auth.kerberos.KerberosPrincipal" value="4" />
                
                <!-- SAML 2 authn context classes. -->
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol" value="100" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocolPassword" value="101" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos" value="102" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorUnregistered" value="103" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered" value="104" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorContract" value="105" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorContract" value="106" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:Password" value="107" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport" value="108" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:PreviousSession" value="109" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:X509" value="110" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:PGP" value="111" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:SPKI" value="112" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:XMLDSig" value="113" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard" value="114" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:SmartcardPKI" value="115" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:SoftwarePKI" value="116" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:Telephony" value="117" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:NomadTelephony" value="118" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:PersonalTelephony" value="119" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:AuthenticatedTelephony" value="120" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword" value="121" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:TLSClient" value="122" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken" value="123" />
                <entry key="urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified" value="124" />

                <!-- SAML 1 authn methods -->
                <entry key="urn:oasis:names:tc:SAML:1.0:am:password" value="200" />
                <entry key="urn:ietf:rfc:1510" value="201" />
                <entry key="urn:oasis:names:tc:SAML:1.0:am:HardwareToken" value="202" />
                <entry key="urn:oasis:names:tc:SAML:1.0:am:X509-PKI" value="203" />
                <entry key="urn:oasis:names:tc:SAML:1.0:am:PGP" value="204" />
                <entry key="urn:oasis:names:tc:SAML:1.0:am:SPKI" value="205" />
                <entry key="urn:oasis:names:tc:SAML:1.0:am:XKMS" value="206" />
                <entry key="urn:ietf:rfc:3075" value="207" />
                <entry key="urn:ietf:rfc:2945" value="208" />
                <entry key="urn:ietf:rfc:2246" value="209" />
                <entry key="urn:oasis:names:tc:SAML:1.0:am:unspecified" value="210" />
                
                <!-- Community-defined assurance profiles. -->
                <entry key="http://id.incommon.org/assurance/silver" value="300" />
                <entry key="http://id.incommon.org/assurance/bronze" value="301" />
                
                <!-- NameID Formats. -->
                <entry key="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified" value="400" />
                <entry key="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" value="401" />
                <entry key="urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName" value="402" />
                <entry key="urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName" value="403" />
                <entry key="urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos" value="404" />
                <entry key="urn:oasis:names:tc:SAML:2.0:nameid-format:entity" value="405" />
                <entry key="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" value="406" />
                <entry key="urn:oasis:names:tc:SAML:2.0:nameid-format:transient" value="407" />
            </map>
        </property>
    </bean>
    
    <!-- Registry of comparison rules configured by deployer and injected into authentication flow. -->
    <bean id="shibboleth.AuthnComparisonRegistry"
        class="net.shibboleth.idp.authn.principal.PrincipalEvalPredicateFactoryRegistry"
        p:registrations="#{getObject('shibboleth.AuthnComparisonRules')}" />

    <!-- Parent bean for auto-registration of rules. -->
    <bean id="shibboleth.AuthnComparisonRegistration" abstract="true"
        class="net.shibboleth.idp.authn.principal.PrincipalEvalPredicateFactoryRegistration" />

    <!-- Exact matching rules. -->
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLAuthnMethodExact" c:value-ref="shibboleth.ExactMatchFactory" />
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACClassRefExact" c:value-ref="shibboleth.ExactMatchFactory" />
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACDeclRefExact" c:value-ref="shibboleth.ExactMatchFactory" />

    <!-- Min/max rules degenerating by default into exact matching. -->
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACClassRefMinimum" c:value-ref="shibboleth.ExactMatchFactory" />
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACDeclRefMinimum" c:value-ref="shibboleth.ExactMatchFactory" />
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACClassRefMaximum" c:value-ref="shibboleth.ExactMatchFactory" />
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACDeclRefMaximum" c:value-ref="shibboleth.ExactMatchFactory" />

    <!-- Empty default matching rules for "better" operator. -->
    <bean id="shibboleth.DefaultBetterClassRefMatchFactory" parent="shibboleth.InexactMatchFactory" />
    <bean id="shibboleth.DefaultBetterDeclRefMatchFactory" parent="shibboleth.InexactMatchFactory" />
    
    <!-- "better" rules that default to failure. -->
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACClassRefBetter" c:value-ref="shibboleth.DefaultBetterClassRefMatchFactory" />
    <bean parent="shibboleth.AuthnComparisonRegistration"
        c:key-ref="shibboleth.SAMLACDeclRefBetter" c:value-ref="shibboleth.DefaultBetterDeclRefMatchFactory" />

    <!-- Exact matching for SAML AC Classes and Declarations (or anything else really). -->
    <bean id="shibboleth.ExactMatchFactory"
        class="net.shibboleth.idp.authn.principal.impl.ExactPrincipalEvalPredicateFactory" />

    <!-- Parent bean for inexact matching factories defined by deployer. -->
    <bean id="shibboleth.InexactMatchFactory" abstract="true"
        class="net.shibboleth.idp.authn.principal.impl.InexactPrincipalEvalPredicateFactory" />

    <!-- Boilerplate objects needed to key the installation of matching rules in the comparison registry. -->

    <bean id="shibboleth.SAMLAuthnMethodExact" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthenticationMethodPrincipal) }" p:second="exact"/>
    
    <bean id="shibboleth.SAMLACClassRefExact" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal) }" p:second="exact"/>

    <bean id="shibboleth.SAMLACDeclRefExact" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextDeclRefPrincipal) }" p:second="exact"/>

    <bean id="shibboleth.SAMLACClassRefMinimum" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal) }" p:second="minimum"/>

    <bean id="shibboleth.SAMLACDeclRefMinimum" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextDeclRefPrincipal) }" p:second="minimum"/>

    <bean id="shibboleth.SAMLACClassRefMaximum" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal) }" p:second="maximum"/>

    <bean id="shibboleth.SAMLACDeclRefMaximum" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextDeclRefPrincipal) }" p:second="maximum"/>

    <bean id="shibboleth.SAMLACClassRefBetter" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal) }" p:second="better"/>

    <bean id="shibboleth.SAMLACDeclRefBetter" parent="shibboleth.Pair"
        p:first="#{ T(net.shibboleth.idp.saml.authn.principal.AuthnContextDeclRefPrincipal) }" p:second="better"/>
    
    <!-- Revocation feature. -->
    
    <bean id="shibboleth.RevocationCacheCondition" class="net.shibboleth.idp.authn.revocation.impl.RevocationCacheCondition" lazy-init="true"
        p:revocationCache-ref="%{idp.authn.revocation.cache:shibboleth.AuthnRevocationCache}"
        p:httpServletRequestSupplier="#{%{idp.authn.revocation.addressBased:false} ? getObject('shibboleth.HttpServletRequestSupplier') : null}"
        p:principalNameLookupStrategy-ref="shibboleth.RevocationPrincipalLookupStrategy" />

    <bean id="shibboleth.AttributeRevocationCondition" class="net.shibboleth.idp.authn.revocation.impl.AttributeRevocationCondition" lazy-init="true"
        p:principalNameLookupStrategy-ref="shibboleth.RevocationPrincipalLookupStrategy"
        p:attributeResolver-ref="shibboleth.AttributeResolverService"
        p:attributeId="#{'%{idp.authn.revocation.attributeId:revocation}'.trim()}" />
        
    <bean id="shibboleth.RevocationPrincipalLookupStrategy" parent="shibboleth.Functions.Compose" lazy-init="true"
        c:g-ref="shibboleth.PrincipalNameLookup.Session"
        c:f-ref="shibboleth.ChildLookup.SessionContext" />
    
    <bean id="shibboleth.AuthnRevocationCache" class="org.opensaml.storage.impl.StorageServiceRevocationCache" lazy-init="true"
        p:entryExpiration="#{'%{idp.authn.revocation.lifetime:%{idp.authn.defaultLifetime:PT12H}}'}"
        p:storage-ref="#{'%{idp.authn.revocation.StorageService:shibboleth.StorageService}'.trim()}"
        p:strict="%{idp.authn.revocation.strict:false}" />
        
    <!-- Servlet beans for RemoteUser and X509 flows. -->

    <bean id="checkAttributes" parent="shibboleth.CommaDelimStringArray"
        c:_0="#{'%{idp.authn.RemoteUser.checkAttributes:}'.trim()}" />
    
    <bean id="checkHeaders" parent="shibboleth.CommaDelimStringArray"
        c:_0="#{'%{idp.authn.RemoteUser.checkHeaders:}'.trim()}" />

    <bean id="shibboleth.RemoteUserAuthServlet" class="net.shibboleth.idp.authn.impl.RemoteUserAuthServlet" lazy-init="true"
        p:checkRemoteUser="%{idp.authn.RemoteUser.checkRemoteUser:true}"
        p:checkAttributes="#{getObject('checkAttributes')}"
        p:checkHeaders="#{getObject('checkHeaders')}"
        p:subjectAttribute="#{'%{idp.authn.RemoteUser.subjectAttribute:}'.trim()}"
        p:authnMethodHeader="#{'%{idp.authn.RemoteUser.authnMethodHeader:}'.trim()}"
        p:authnAuthorityHeader="#{'%{idp.authn.RemoteUser.authnAuthorityHeader:}'.trim()}" />
        
    <bean id="shibboleth.X509AuthServlet" class="net.shibboleth.idp.authn.impl.X509AuthServlet" lazy-init="true"
        p:saveCertificateToCredentialSet="%{idp.authn.X509.saveCertificateToCredentialSet:true}"
        p:trustEngine="#{getObject('shibboleth.authn.X509.TrustEngine')}" />

</beans>
