<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <import resource="conditional:${idp.home}/conf/admin/general-admin.xml" />
    <import resource="${idp.home}/conf/admin/metrics.xml" />
    <import resource="conditional:${idp.home}/conf/admin/unlock-keys.xml" />

    <!-- Management bean to collect and expose AdministrativeFlowDescriptors. -->
    
    <bean id="shibboleth.AdministrativeFlowDescriptorManager"
        class="net.shibboleth.idp.admin.impl.AdministrativeFlowDescriptorManager"
        p:components="#{getObject('shibboleth.AvailableAdminFlows')}" />

    <!-- Built-in flow descriptors. -->
    
    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/status"
            p:loggingId="%{idp.status.logging:Status}"
            p:policyName="%{idp.status.accessPolicy:AccessByIPAddress}"
            p:nonBrowserSupported="%{idp.status.nonBrowserSupported:false}"
            p:authenticated="%{idp.status.authenticated:false}"
            p:resolveAttributes="%{idp.status.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.status.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.status.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/reload-service-configuration"
            p:loggingId="%{idp.reload.logging:Reload}"
            p:policyName="%{idp.reload.accessPolicy:AccessByIPAddress}"
            p:nonBrowserSupported="%{idp.reload.nonBrowserSupported:false}"
            p:authenticated="%{idp.reload.authenticated:false}"
            p:resolveAttributes="%{idp.reload.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.reload.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.reload.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/reload-metadata"
            p:loggingId="%{idp.reload.logging:Reload}"
            p:policyName="%{idp.reload.accessPolicy:AccessByIPAddress}"
            p:nonBrowserSupported="%{idp.reload.nonBrowserSupported:false}"
            p:authenticated="%{idp.reload.authenticated:false}"
            p:resolveAttributes="%{idp.reload.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.reload.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.reload.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/resolvertest"
            p:loggingId="%{idp.resolvertest.logging:ResolverTest}"
            p:policyName="%{idp.resolvertest.accessPolicy:AccessByIPAddress}"
            p:nonBrowserSupported="%{idp.resolvertest.nonBrowserSupported:false}"
            p:authenticated="%{idp.resolvertest.authenticated:false}"
            p:resolveAttributes="%{idp.resolvertest.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.resolvertest.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.resolvertest.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/dumpconfig"
            p:loggingId="%{idp.dumpconfig.logging:DumpConfig}"
            p:policyName="%{idp.dumpconfig.accessPolicy:AccessByIPAddress}"
            p:nonBrowserSupported="%{idp.dumpconfig.nonBrowserSupported:false}"
            p:authenticated="%{idp.dumpconfig.authenticated:false}"
            p:resolveAttributes="%{idp.dumpconfig.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.dumpconfig.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.dumpconfig.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/mdquery"
            p:loggingId="%{idp.mdquery.logging:MetadataQuery}"
            p:policyName="%{idp.mdquery.accessPolicy:AccessByIPAddress}"
            p:nonBrowserSupported="%{idp.mdquery.nonBrowserSupported:false}"
            p:authenticated="%{idp.mdquery.authenticated:false}"
            p:resolveAttributes="%{idp.mdquery.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.mdquery.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.mdquery.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/metrics"
            p:loggingId="%{idp.metrics.logging:Metrics}"
            p:policyNameLookupStrategy-ref="shibboleth.metrics.AccessPolicyStrategy"
            p:nonBrowserSupported="%{idp.metrics.nonBrowserSupported:false}"
            p:authenticated="%{idp.metrics.authenticated:false}"
            p:resolveAttributes="%{idp.metrics.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.metrics.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.metrics.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/hello"
            p:loggingId="%{idp.hello.logging:Hello}"
            p:policyName="%{idp.hello.accessPolicy:AccessByAdminUser}"
            p:nonBrowserSupported="%{idp.hello.nonBrowserSupported:false}"
            p:authenticated="%{idp.hello.authenticated:true}"
            p:resolveAttributes="%{idp.hello.resolveAttributes:true}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.hello.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.hello.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/lockout-manager"
            p:loggingId="%{idp.lockout.logging:Lockout}"
            p:policyName="%{idp.lockout.accessPolicy:AccessDenied}"
            p:nonBrowserSupported="%{idp.lockout.nonBrowserSupported:false}"
            p:authenticated="%{idp.lockout.authenticated:false}"
            p:resolveAttributes="%{idp.lockout.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.lockout.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.lockout.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/revocation"
            p:loggingId="%{idp.revocation.logging:Revocation}"
            p:policyName="%{idp.revocation.accessPolicy:AccessDenied}"
            p:nonBrowserSupported="%{idp.revocation.nonBrowserSupported:false}"
            p:authenticated="%{idp.revocation.authenticated:false}"
            p:resolveAttributes="%{idp.revocation.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.revocation.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.revocation.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.AdminFlow"
            c:id="http://shibboleth.net/ns/profiles/storage"
            p:loggingId="%{idp.storage.logging:Storage}"
            p:policyName="%{idp.storage.accessPolicy:AccessDenied}"
            p:nonBrowserSupported="%{idp.storage.nonBrowserSupported:false}"
            p:authenticated="%{idp.storage.authenticated:false}"
            p:resolveAttributes="%{idp.storage.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.storage.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.storage.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <bean parent="shibboleth.OneTimeAdminFlow"
            c:id="http://shibboleth.net/ns/profiles/unlock-keys"
            p:loggingId="%{idp.unlock-keys.logging:UnlockKeys}"
            p:policyName="%{idp.unlock-keys.accessPolicy:AccessDenied}"
            p:nonBrowserSupported="%{idp.unlock-keys.nonBrowserSupported:false}"
            p:authenticated="%{idp.unlock-keys.authenticated:true}"
            p:resolveAttributes="%{idp.unlock-keys.resolveAttributes:false}">
        <property name="postAuthenticationFlows">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.unlock-keys.postAuthenticationFlows:}'.trim()}" />
        </property>
        <property name="defaultAuthenticationMethodsByString">
            <bean parent="shibboleth.CommaDelimStringArray"
                c:_0="#{'%{idp.unlock-keys.defaultAuthenticationMethods:}'.trim()}" />
        </property>
    </bean>

    <!-- Parent beans to default some of the flow boilerplate. -->

    <bean id="shibboleth.AdminFlow" abstract="true"
        class="net.shibboleth.idp.admin.BasicAdministrativeFlowDescriptor"
        p:principalServiceManager-ref="shibboleth.PrincipalServiceManager"
        p:nonBrowserSupported="false" />

    <bean id="shibboleth.OneTimeAdminFlow" abstract="true"
        class="net.shibboleth.idp.admin.OneTimeAdministrativeFlowDescriptor"
        p:principalServiceManager-ref="shibboleth.PrincipalServiceManager"
        p:nonBrowserSupported="false" />

    <!-- Function for returning custom access control policies for access to metrics. -->

    <bean id="shibboleth.metrics.AccessPolicyStrategy" parent="shibboleth.ContextFunctions.Expression"
        c:expression="#custom.get('policyMap').get(#input.getSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext)).getRequestContext().getFlowScope().get('metricId')) ?: #custom.get('defaultPolicy')"
        c:outputType="#{T(java.lang.String)}">
        <property name="customObject">
            <map>
                <entry key="policyMap" value-ref="shibboleth.metrics.AccessPolicyMap" />
                <entry key="defaultPolicy" value-ref="shibboleth.metrics.DefaultAccessPolicy" />
            </map>
        </property>
    </bean>
    
    <!-- MetricRegistry we can control with logging categories. -->
    <bean id="shibboleth.metrics.MetricRegistry"
        class="org.opensaml.core.metrics.impl.FilteredMetricRegistry"
        p:metricFilter-ref="shibboleth.metrics.LoggerDrivenMetricFilter" />
        
    <bean id="shibboleth.metrics.LoggerDrivenMetricFilter"
        class="org.opensaml.core.metrics.LoggerDrivenMetricFilter"
        c:_0="metrics."
        c:_1="#{getObject('shibboleth.metrics.MetricLevelMap')}" />
        
    <!-- Parent beans for registering MetricSets and Metrics. -->
    
    <bean id="shibboleth.metrics.RegisterMetricSets" abstract="true"
        class="org.springframework.beans.factory.config.MethodInvokingBean"
        p:targetObject-ref="shibboleth.metrics.MetricRegistry"
        p:targetMethod="registerMultiple" />

    <bean id="shibboleth.metrics.RegisterMetric" abstract="true"
        class="org.springframework.beans.factory.config.MethodInvokingBean"
        p:targetObject-ref="shibboleth.metrics.MetricRegistry"
        p:targetMethod="register" />
        
    <bean id="shibboleth.metrics.HTTPReporter" abstract="true" destroy-method="stop"
        class="org.opensaml.core.metrics.impl.HTTPReporter"
        c:registry-ref="shibboleth.metrics.MetricRegistry"
        c:filter="#{null}"
        p:httpClient-ref="shibboleth.InternalHttpClient" />
    
    <!-- Some predefined metric sets, only created if installed by user. -->
    
    <bean id="shibboleth.metrics.CoreGaugeSet" class="org.opensaml.core.metrics.impl.CoreGaugeSet" lazy-init="true" />
    
    <bean id="shibboleth.metrics.ModuleGaugeSet" class="net.shibboleth.idp.module.impl.ModuleGuageSet" lazy-init="true" />

    <bean id="shibboleth.metrics.IdPGaugeSet" class="net.shibboleth.idp.metrics.impl.IdPGaugeSet" lazy-init="true"
        p:exposedProperties="#{getObject('shibboleth.metrics.ExposedProperties')}" />
    
    <bean id="shibboleth.metrics.LoggingGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.logging"
        p:service-ref="shibboleth.LoggingService" />
    
    <bean id="shibboleth.metrics.AccessControlGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.accesscontrol"
        p:service-ref="shibboleth.ReloadableAccessControlService" />

    <bean id="shibboleth.metrics.MetadataGaugeSet"
        class="net.shibboleth.idp.saml.metadata.impl.MetadataResolverServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.metadata"
        p:service-ref="shibboleth.MetadataResolverService" />

    <bean id="shibboleth.metrics.RelyingPartyGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.relyingparty"
        p:service-ref="shibboleth.RelyingPartyResolverService" />

    <bean id="shibboleth.metrics.NameIdentifierGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.nameid"
        p:service-ref="shibboleth.NameIdentifierGenerationService" />

    <bean id="shibboleth.metrics.AttributeRegistryGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.attribute.registry"
        p:service-ref="shibboleth.AttributeRegistryService" />

    <bean id="shibboleth.metrics.AttributeResolverGaugeSet"
        class="net.shibboleth.idp.attribute.resolver.impl.AttributeResolverServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.attribute.resolver"
        p:service-ref="shibboleth.AttributeResolverService" />

    <bean id="shibboleth.metrics.AttributeFilterGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.attribute.filter"
        p:service-ref="shibboleth.AttributeFilterService" />

    <bean id="shibboleth.metrics.CASServiceRegistryGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.cas.registry"
        p:service-ref="shibboleth.ReloadableCASServiceRegistry" />

    <bean id="shibboleth.metrics.ManagedBeanGaugeSet"
        class="net.shibboleth.shared.service.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="net.shibboleth.idp.managedbean"
        p:service-ref="shibboleth.ManagedBeanService" />

    <util:list id="shibboleth.IdPUpdateCheckUrls">
        <value>https://shibboleth.net/downloads/identity-provider/plugins/idp-versions.properties</value>
        <value>http://plugins.shibboleth.net/idp-versions.properties</value>
    </util:list>

    <bean id="shibboleth.UpdateStatus"
       class="net.shibboleth.idp.admin.impl.ReportUpdateStatus"
       lazy-init="false"
       depends-on="shibboleth.LoggingService"
       p:updateUrls-ref="%{idp.updateCheck.urls:shibboleth.IdPUpdateCheckUrls}"
       p:enabled="%{idp.updateCheck.enabled:true}"
       p:httpClient-ref="%{idp.updateCheck.httpClient:shibboleth.InternalHttpClient}"
       p:securityParams="#{ environment.containsProperty('idp.updateCheck.httpSecurityParameters') ? getObject('idp.updateCheck.httpSecurityParameters') :null}"/>

</beans>
