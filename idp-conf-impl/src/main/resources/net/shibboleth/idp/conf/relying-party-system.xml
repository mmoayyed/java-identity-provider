<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <context:annotation-config/>

    <!-- This is one of the few properties we rely on that has no default. -->
    <bean id="entityID" class="java.lang.String" c:_0="%{idp.entityID}" />

    <!-- Pulls together the various components that feed the resolver. -->
    <bean class="net.shibboleth.idp.relyingparty.impl.DefaultRelyingPartyConfigurationResolver"
        p:unverifiedConfiguration-ref="shibboleth.UnverifiedRelyingParty"
        p:defaultConfiguration-ref="shibboleth.DefaultRelyingParty"
        p:relyingPartyConfigurations-ref="shibboleth.RelyingPartyOverrides"
        p:defaultSecurityConfiguration-ref="%{idp.security.config:shibboleth.DefaultSecurityConfiguration}" />

    <!--
    Auto-wiring exposers for credentials to get them loaded into the bean above.
    The qualifiers control which auto-wiring point is used.
    -->
    <bean class="net.shibboleth.idp.relyingparty.RelyingPartyResolverCredentialHolder"
            c:_0="#{getObject('shibboleth.SigningCredentials')}">
        <qualifier value="signing"/>
    </bean>
    <bean class="net.shibboleth.idp.relyingparty.RelyingPartyResolverCredentialHolder"
            c:_0="#{getObject('shibboleth.EncryptionCredentials')}">
        <qualifier value="encryption"/>
    </bean>

    <!-- Parent bean for generic RelyingParty overrides that establishes defaults. -->
    <bean id="RelyingParty" abstract="true" class="net.shibboleth.idp.relyingparty.RelyingPartyConfiguration"
        p:responderId="#{getObject('entityID')}"
        p:detailedErrorsPredicate="%{idp.errors.detailed:false}" />

    <!-- Parent bean for RelyingParty overrides based on activation by name(s). -->
    <bean id="RelyingPartyByName" abstract="true" parent="RelyingParty"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byName" />

    <!-- Parent bean for RelyingParty overrides based on activation by group or SAML affiliation. -->
    <bean id="RelyingPartyByGroup" abstract="true" parent="RelyingParty"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byGroup"
        c:resolver-ref="shibboleth.MetadataResolver" />

    <!-- Parent bean for RelyingParty overrides based on activation by local containment only. -->
    <bean id="RelyingPartyByEntitiesDescriptor" abstract="true" parent="RelyingParty"
            class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byGroup">
        <constructor-arg name="resolver"><null /></constructor-arg>
    </bean>

    <!-- Parent bean for RelyingParty overrides based on activation by tag. -->
    <bean id="RelyingPartyByTag" abstract="true" parent="RelyingParty"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byTag"
        c:trim="false" c:matchAll="false" />

    <!-- Parent bean for RelyingParty overrides based on activation by tag. -->
    <bean id="RelyingPartyByMappedTag" abstract="true" parent="RelyingParty"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byMappedTag"
        c:trim="false" c:matchAll="false" />

    <bean id="TagCandidate" abstract="true"
        class="org.opensaml.saml.common.profile.logic.EntityAttributesPredicate.Candidate" />
        
    <!-- Import parent beans for metadata-driven configuration approach. -->
    <import resource="relying-party-mddriven.xml" />
        
    <!--
    Default Profile Configurations, also usable as parent beans in overrides.
    
    Each profile shows up twice, once as a basic bean and again as a child bean that adds
    a suite of metadata-driven lookup strategies pre-injected.
    -->
    
    <bean id="Shibboleth.SSO" lazy-init="true"
        class="net.shibboleth.idp.saml.saml1.profile.config.BrowserSSOProfileConfiguration"
        p:artifactConfiguration-ref="shibboleth.DefaultArtifactConfiguration" />
        
    <bean id="SAML1.AttributeQuery" lazy-init="true"
        class="net.shibboleth.idp.saml.saml1.profile.config.AttributeQueryProfileConfiguration" />

    <bean id="SAML1.ArtifactResolution" lazy-init="true"
        class="net.shibboleth.idp.saml.saml1.profile.config.ArtifactResolutionProfileConfiguration" />

    <bean id="SAML2.SSO" lazy-init="true"
	        class="net.shibboleth.idp.saml.saml2.profile.config.BrowserSSOProfileConfiguration"
	        p:artifactConfiguration-ref="shibboleth.DefaultArtifactConfiguration"
	        p:encryptionOptionalPredicate="%{idp.encryption.optional:false}">
        <property name="defaultAuthenticationMethodsLookupStrategy">
            <bean class="net.shibboleth.idp.saml.saml2.profile.config.navigate.ProxyAwareDefaultAuthenticationMethodsLookupFunction"
                p:mappings="#{getObject('shibboleth.PrincipalProxyRequestMappings')}" />        
        </property>
        <property name="authnContextTranslationStrategy">
            <bean class="net.shibboleth.idp.saml.authn.principal.impl.MapDrivenAuthnContextTranslationStrategy"
                p:mappings="#{getObject('shibboleth.PrincipalProxyResponseMappings')}" />
        </property>
    </bean>

    <util:constant id="SAML2.SSO.FEATURE_AUTHNCONTEXT"
        static-field="net.shibboleth.idp.saml.saml2.profile.config.BrowserSSOProfileConfiguration.FEATURE_AUTHNCONTEXT"/>

    <util:constant id="SAML2.SSO.FEATURE_SCOPING"
        static-field="net.shibboleth.idp.saml.saml2.profile.config.BrowserSSOProfileConfiguration.FEATURE_SCOPING"/>

    <bean id="SAML2.ECP" lazy-init="true"
        class="net.shibboleth.idp.saml.saml2.profile.config.ECPProfileConfiguration"
        p:encryptionOptionalPredicate="%{idp.encryption.optional:false}" />

    <bean id="SAML2.Logout" lazy-init="true"
        class="net.shibboleth.idp.saml.saml2.profile.config.SingleLogoutProfileConfiguration"
        p:artifactConfiguration-ref="shibboleth.DefaultArtifactConfiguration"
        p:encryptionOptionalPredicate="%{idp.encryption.optional:false}" />

    <bean id="SAML2.AttributeQuery" lazy-init="true"
        class="net.shibboleth.idp.saml.saml2.profile.config.AttributeQueryProfileConfiguration"
        p:encryptionOptionalPredicate="%{idp.encryption.optional:false}" />

    <bean id="SAML2.ArtifactResolution" lazy-init="true"
        class="net.shibboleth.idp.saml.saml2.profile.config.ArtifactResolutionProfileConfiguration"
        p:encryptionOptionalPredicate="%{idp.encryption.optional:false}" />

    <!-- Remove in V6. -->
    <bean id="Liberty.SSOS" lazy-init="true"
        class="net.shibboleth.idp.saml.idwsf.profile.config.SSOSProfileConfiguration" />

    <bean id="CAS.LoginConfiguration" lazy-init="true"
        class="net.shibboleth.idp.cas.config.LoginConfiguration" />

    <bean id="CAS.ProxyConfiguration" lazy-init="true"
        class="net.shibboleth.idp.cas.config.ProxyConfiguration" />

    <!-- Ticket validity period applies to proxy-granting tickets created upon successful proxy callback validation -->
    <bean id="CAS.ValidateConfiguration" lazy-init="true"
        class="net.shibboleth.idp.cas.config.ValidateConfiguration"
        p:serviceComparator="#{getObject('shibboleth.CASServiceComparator') ?: getObject('shibboleth.DefaultCASServiceComparator')}" />

    <!-- Artifact Configuration Defaults -->
    
    <bean id="shibboleth.DefaultArtifactConfiguration"
        class="net.shibboleth.idp.saml.profile.config.BasicSAMLArtifactConfiguration"
        p:artifactResolutionServiceIndex="%{idp.artifact.endpointIndex:2}" />
    
    <!--
    Security Configuration Defaults
    
    These settings establish the default security configurations for signatures and encryption
    and loads the default credentials used.
    -->

    <bean id="shibboleth.DefaultSecurityConfiguration" class="org.opensaml.xmlsec.config.BasicXMLSecurityConfiguration">
        <property name="signatureSigningConfiguration">
            <ref bean="#{'%{idp.signing.config:shibboleth.SigningConfiguration.SHA256}'.trim()}" />
        </property>
        
        <property name="signatureValidationConfiguration">
            <bean parent="shibboleth.BasicSignatureValidationConfiguration" 
                p:signatureTrustEngine-ref="#{'%{idp.trust.signatures:shibboleth.ChainingSignatureTrustEngine}'.trim()}" />
        </property>

        <property name="clientTLSValidationConfiguration">
            <bean parent="shibboleth.BasicClientTLSValidationConfiguration"
                p:x509TrustEngine-ref="#{'%{idp.trust.certificates:shibboleth.ChainingX509TrustEngine}'.trim()}" />
        </property>
        
        <property name="httpClientSecurityConfiguration">
            <bean parent="shibboleth.BasicHttpClientSecurityConfiguration"
                p:clientTLSCredential="#{getObject('shibboleth.DefaultClientTLSCredential')}"
                p:TLSTrustEngine-ref="#{'%{idp.trust.httpClient.tls:shibboleth.ChainingX509TrustEngine}'.trim()}" />
        </property>
        
        <property name="encryptionConfiguration">
            <ref bean="#{'%{idp.encryption.config:shibboleth.EncryptionConfiguration.CBC}'.trim()}" />
        </property>

        <property name="decryptionConfiguration">
            <bean parent="shibboleth.BasicDecryptionConfiguration"
                p:KEKKeyInfoCredentialResolver-ref="defaultKeyEncryptionCredentialResolver"
                p:encryptedKeyResolver-ref="defaultEncryptedKeyResolver" />
        </property>
    </bean>
    
    <!-- KeyInfoGeneration machinery. Former gets injected into the signing and encryption configs. -->
    <bean id="NamedKeyInfoGeneratorManager"
        class="org.opensaml.xmlsec.keyinfo.NamedKeyInfoGeneratorManager"
        p:useDefaultManager="true" />
    <bean id="DefaultKeyInfoGeneratorManager"
        factory-bean="NamedKeyInfoGeneratorManager"
        factory-method="getDefaultManager" />
        
    <!-- These install two default generator managers, for Credential and X509Credential. -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean"
        p:targetObject-ref="DefaultKeyInfoGeneratorManager"
        p:targetMethod="registerFactory">
        <property name="arguments">
            <list>
                <ref bean="%{idp.security.basicKeyInfoFactory:shibboleth.BasicKeyInfoGeneratorFactory}" />
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean"
        p:targetObject-ref="DefaultKeyInfoGeneratorManager"
        p:targetMethod="registerFactory">
        <property name="arguments">
            <list>
                <ref bean="%{idp.security.x509KeyInfoFactory:shibboleth.X509KeyInfoGeneratorFactory}" />
            </list>
        </property>
    </bean>
    
    <!-- The default generators, overrideable by inheriting from them and then setting the two properties. -->
    <bean id="shibboleth.BasicKeyInfoGeneratorFactory" class="org.opensaml.xmlsec.keyinfo.impl.BasicKeyInfoGeneratorFactory"
        p:emitPublicKeyValue="true"
        p:emitKeyNames="true"  />
    <bean id="shibboleth.X509KeyInfoGeneratorFactory" class="org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory"
        p:emitEntityCertificate="true" />

    <!-- Convenience beans for directly injecting SHA-256 or SHA-1 usage.  -->
    
    <bean id="shibboleth.SecurityConfiguration.SHA256" parent="shibboleth.DefaultSecurityConfiguration" lazy-init="true"
        p:signatureSigningConfiguration-ref="shibboleth.SigningConfiguration.SHA256" />

    <bean id="shibboleth.SecurityConfiguration.SHA1" parent="shibboleth.DefaultSecurityConfiguration" lazy-init="true"
        p:signatureSigningConfiguration-ref="shibboleth.SigningConfiguration.SHA1" />

    <!-- Actual signing configurations for SHA-256 and SHA-1. -->
    
    <bean id="shibboleth.SigningConfiguration.SHA256" parent="shibboleth.BasicSignatureSigningConfiguration"
            p:signingCredentials-ref="shibboleth.DefaultSigningCredential"
            p:keyInfoGeneratorManager-ref="NamedKeyInfoGeneratorManager">
        <property name="signatureAlgorithms">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256" />
                <util:constant
                    static-field="org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_ECDSA_SHA256" />
            </list>
        </property>
        <property name="signatureReferenceDigestMethods">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_DIGEST_SHA256" />
            </list>
        </property>
    </bean>

    <bean id="shibboleth.SigningConfiguration.SHA1" parent="shibboleth.BasicSignatureSigningConfiguration"
            p:signingCredentials-ref="shibboleth.DefaultSigningCredential"
            p:keyInfoGeneratorManager-ref="NamedKeyInfoGeneratorManager">
        <property name="signatureAlgorithms">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1" />
                <util:constant
                    static-field="org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_ECDSA_SHA1" />
            </list>
        </property>
        <property name="signatureReferenceDigestMethods">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_DIGEST_SHA1" />
            </list>
        </property>
    </bean>

    <!-- Convenience beans for directly injecting AES-CBC or AES-GCM usage.  -->
    
    <bean id="shibboleth.SecurityConfiguration.CBC" parent="shibboleth.DefaultSecurityConfiguration" lazy-init="true"
        p:encryptionConfiguration-ref="shibboleth.EncryptionConfiguration.CBC" />

    <bean id="shibboleth.SecurityConfiguration.GCM" parent="shibboleth.DefaultSecurityConfiguration" lazy-init="true"
        p:encryptionConfiguration-ref="shibboleth.EncryptionConfiguration.GCM" />

    <!-- Actual encryption configurations for AES-CBC and AES-GCM. -->

    <bean id="shibboleth.EncryptionConfiguration.CBC" parent="shibboleth.BasicEncryptionConfiguration"
            p:keyTransportKeyInfoGeneratorManager-ref="NamedKeyInfoGeneratorManager">
        <property name="dataEncryptionAlgorithms">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.encryption.support.EncryptionConstants.ALGO_ID_BLOCKCIPHER_AES128" />
            </list>
        </property>
        <property name="keyTransportEncryptionAlgorithms">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.encryption.support.EncryptionConstants.ALGO_ID_KEYTRANSPORT_RSAOAEP" />
            </list>
        </property>
    </bean>

    <bean id="shibboleth.EncryptionConfiguration.GCM" parent="shibboleth.BasicEncryptionConfiguration"
            p:keyTransportKeyInfoGeneratorManager-ref="NamedKeyInfoGeneratorManager">
        <property name="dataEncryptionAlgorithms">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.encryption.support.EncryptionConstants.ALGO_ID_BLOCKCIPHER_AES128_GCM" />
            </list>
        </property>
        <property name="keyTransportEncryptionAlgorithms">
            <list>
                <util:constant
                    static-field="org.opensaml.xmlsec.encryption.support.EncryptionConstants.ALGO_ID_KEYTRANSPORT_RSAOAEP" />
            </list>
        </property>
    </bean>
    
    <!-- Beans related to configuration of key agreement, mostly to provide abstract parent beans for impl classes -->
    
    <bean id="shibboleth.KeyAgreement.Configuration" abstract="true"
        class="org.opensaml.saml.security.SAMLMetadataKeyAgreementEncryptionConfiguration" />

    <bean id="shibboleth.KeyAgreement.ConcatKDF" abstract="true" class="org.opensaml.xmlsec.derivation.impl.ConcatKDF" />

    <bean id="shibboleth.KeyAgreement.PBKDF2" abstract="true" class="org.opensaml.xmlsec.derivation.impl.PBKDF2" />

    <bean id="shibboleth.KeyAgreement.DigestMethod" abstract="true" class="org.opensaml.xmlsec.agreement.impl.DigestMethod" />

    <bean id="shibboleth.KeyAgreement.KANonce" abstract="true" class="org.opensaml.xmlsec.agreement.impl.KANonce" />

    <bean id="shibboleth.MetadataPKIXValidationInformationResolver"
        class="net.shibboleth.idp.saml.security.impl.MetadataPKIXValidationInformationResolver"
        c:resolver-ref="shibboleth.RoleDescriptorResolver" />

    <!-- Trust Engine options for message signature evaluation. -->
        
    <bean id="shibboleth.ExplicitKeySignatureTrustEngine"
        class="org.opensaml.xmlsec.signature.support.impl.ExplicitKeySignatureTrustEngine"
        c:resolver-ref="shibboleth.MetadataCredentialResolver"
        c:keyInfoResolver-ref="shibboleth.KeyInfoCredentialResolver" />

    <bean id="shibboleth.PKIXSignatureTrustEngine"
        class="org.opensaml.xmlsec.signature.support.impl.PKIXSignatureTrustEngine" 
        c:resolver-ref="shibboleth.MetadataPKIXValidationInformationResolver"
        c:keyInfoResolver-ref="shibboleth.KeyInfoCredentialResolver" />

    <bean id="shibboleth.ChainingSignatureTrustEngine"
            class="org.opensaml.xmlsec.signature.support.impl.ChainingSignatureTrustEngine">
        <constructor-arg>
            <list>
                <ref bean="shibboleth.ExplicitKeySignatureTrustEngine" />
                <ref bean="shibboleth.PKIXSignatureTrustEngine" />
            </list>
        </constructor-arg>
    </bean>

    <!-- Trust Engine options for X.509 certificate evaluation (e.g., TLS). -->

    <bean id="shibboleth.ExplicitKeyX509TrustEngine"
        class="org.opensaml.security.trust.impl.ExplicitKeyTrustEngine"
        c:resolver-ref="shibboleth.MetadataCredentialResolver" />
    <!-- Backward compatibility, remove in 5.0. -->
    <alias name="shibboleth.ExplicitKeyX509TrustEngine" alias="shibboleth.ExplicitX509TrustEngine" />

    <bean id="shibboleth.PKIXX509TrustEngine"
        class="org.opensaml.security.x509.impl.PKIXX509CredentialTrustEngine"
        c:resolver-ref="shibboleth.MetadataPKIXValidationInformationResolver" />

    <bean id="shibboleth.ChainingX509TrustEngine" class="org.opensaml.security.trust.impl.ChainingTrustEngine">
        <constructor-arg>
            <list>
                <ref bean="shibboleth.ExplicitKeyX509TrustEngine" />
                <ref bean="shibboleth.PKIXX509TrustEngine" />
            </list>
        </constructor-arg>
    </bean>

    <!-- Defines decryption keys, along with support for optimizing lookup based on KeyInfo hints. -->
    <bean id="defaultKeyEncryptionCredentialResolver" class="org.opensaml.xmlsec.keyinfo.impl.ChainingKeyInfoCredentialResolver">
        <constructor-arg>
            <list>
                <bean class="org.opensaml.xmlsec.keyinfo.impl.LocalKeyInfoCredentialResolver">
                    <constructor-arg name="localCredentialResolver">
                        <bean class="org.opensaml.xmlsec.keyinfo.impl.CollectionKeyInfoCredentialResolver"
                            c:credentials-ref="shibboleth.DefaultEncryptionCredentials" />
                    </constructor-arg>
                    <constructor-arg name="keyInfoProviders">
                        <list>
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.RSAKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.DSAKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.ECKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.DEREncodedKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.InlineX509DataProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.AgreementMethodKeyInfoProvider" />
                        </list>
                    </constructor-arg>
                </bean>
                <bean class="org.opensaml.xmlsec.keyinfo.impl.StaticKeyInfoCredentialResolver"
                    c:credentials-ref="shibboleth.DefaultEncryptionCredentials" />
            </list>
        </constructor-arg>
    </bean>
    
    <!-- Defines how the system locates EncryptedKey elements sent in messages containing encrypted objects. -->
    <bean id="defaultEncryptedKeyResolver" class="org.opensaml.xmlsec.encryption.support.ChainingEncryptedKeyResolver"
            c:recipients="#{getObject('shibboleth.DecryptionRecipients') ?: getObject('entityID')}">
        <constructor-arg name="encKeyResolvers">
            <list>
                <bean class="org.opensaml.xmlsec.encryption.support.InlineEncryptedKeyResolver" />
                <bean class="org.opensaml.saml.saml2.encryption.EncryptedElementTypeEncryptedKeyResolver" />
                <bean class="org.opensaml.xmlsec.encryption.support.SimpleRetrievalMethodEncryptedKeyResolver" />
                <bean class="org.opensaml.xmlsec.encryption.support.SimpleKeyInfoReferenceEncryptedKeyResolver" />
            </list>
        </constructor-arg>
    </bean>

    <!-- Wildcard import hook for plugins. -->
    <import resource="classpath*:/META-INF/net/shibboleth/idp/service/relying-party/postconfig.xml" />

</beans>
