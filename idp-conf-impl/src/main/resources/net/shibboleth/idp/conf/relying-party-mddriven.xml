<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">
       
    <!--
    This is ALOT of wiring to pre-configure support for virtually system-wide support for deriving relying-party
    settings and profile settings through examination of metadata tags.
    
    Anywhere that the underlying non-metadata-driven beans contain default properties, there may need to be a
    re-injection of the same defaults here because both constant and runtime-derived settings are actually handled
    with strategy functions.
    -->

    <!-- Parent beans for defining metadata-driven config lookup strategies. -->

    <bean id="RelyingParty.MDDriven" abstract="true" parent="RelyingParty">
        <property name="responderIdLookupStrategy">
            <bean parent="shibboleth.MDDrivenStringProperty" p:propertyName="responderId" p:defaultValue="#{getObject('entityID')}" />
        </property>
        <property name="profileConfigurationsLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="profileConfigurations"
                p:propertyType="#{T(java.util.Map)}" />
        </property>
        <property name="detailedErrorsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="detailedErrors" />
                </constructor-arg>
                <constructor-arg value="%{idp.errors.detailed:false}" />
            </bean>
        </property>
    </bean>
    
    <!-- Parent beans for metadata-driven RelyingParty helpers. -->

    <bean id="RelyingPartyByName.MDDriven" parent="RelyingParty.MDDriven" abstract="true"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byName" />

    <bean id="RelyingPartyByGroup.MDDriven" parent="RelyingParty.MDDriven" abstract="true"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byGroup"
        c:resolver-ref="shibboleth.MetadataResolver" />

    <bean id="RelyingPartyByEntitiesDescriptor.MDDriven" abstract="true" parent="RelyingParty.MDDriven"
            class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byGroup">
        <constructor-arg name="resolver"><null /></constructor-arg>
    </bean>

    <bean id="RelyingPartyByTag.MDDriven" parent="RelyingParty.MDDriven" abstract="true"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byTag"
        c:trim="false" c:matchAll="false" />

    <bean id="RelyingPartyByMappedTag.MDDriven" parent="RelyingParty.MDDriven" abstract="true"
        class="net.shibboleth.idp.saml.relyingparty.impl.RelyingPartyConfigurationSupport" factory-method="byMappedTag"
        c:trim="false" c:matchAll="false" />
    
    <bean id="shibboleth.DefaultMDProfileAliases"
            class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>http://shibboleth.net/ns/profiles</value>
            </list>
        </property>
    </bean>

    <!-- These beans need two different paths to the metadata, one via PRC and one via MC. -->
    <bean id="shibboleth.AbstractMDDrivenProperty" abstract="true"
        p:profileMetadataLookupStrategy-ref="shibboleth.EntityDescriptorLookup.RelyingParty"
        p:messageMetadataLookupStrategy-ref="MessageContextMetadataLookupStrategy"
        p:profileAliases="#{getObject('shibboleth.MDProfileAliases') ?: getObject('shibboleth.DefaultMDProfileAliases')}"
        p:ignoreUnmappedEntityAttributes="%{idp.service.relyingparty.ignoreUnmappedEntityAttributes:false}" />
        
    <bean id="MessageContextMetadataLookupStrategy" parent="shibboleth.Functions.Compose">
        <constructor-arg name="g">
            <bean class="org.opensaml.saml.common.messaging.context.navigate.EntityDescriptorLookupFunction" />
        </constructor-arg>
        <constructor-arg name="f">
            <bean class="net.shibboleth.saml.profile.context.navigate.messaging.SAMLMetadataContextLookupFunction" />
        </constructor-arg>
    </bean>
    
    <bean id="shibboleth.MDDrivenStringProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.StringConfigurationLookupStrategy" />
    <bean id="shibboleth.MDDrivenBoolProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.BooleanConfigurationLookupStrategy" />
    <bean id="shibboleth.MDDrivenIntProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.IntegerConfigurationLookupStrategy" />
    <bean id="shibboleth.MDDrivenLongProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.LongConfigurationLookupStrategy" />
    <bean id="shibboleth.MDDrivenDoubleProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.DoubleConfigurationLookupStrategy" />
    <bean id="shibboleth.MDDrivenDurationProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.DurationConfigurationLookupStrategy" />
    <bean id="shibboleth.MDDrivenListProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.ListConfigurationLookupStrategy"
        p:propertyType="#{T(java.lang.String)}" />
    <bean id="shibboleth.MDDrivenSetProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.SetConfigurationLookupStrategy"
        p:propertyType="#{T(java.lang.String)}" />
    <bean id="shibboleth.MDDrivenBeanProperty" abstract="true" parent="shibboleth.AbstractMDDrivenProperty"
        class="net.shibboleth.idp.attribute.config.BeanConfigurationLookupStrategy" />

    <!-- Wiring lookup strategies into the actual profile configurations of various types. -->

    <bean id="AbstractMDDrivenProfile" abstract="true">
        <property name="securityConfigurationLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="securityConfiguration"
                p:propertyType="#{T(org.opensaml.security.config.SecurityConfiguration)}" />
        </property>
        <property name="disallowedFeaturesLookupStrategy">
            <bean parent="shibboleth.MDDrivenIntProperty" p:propertyName="disallowedFeatures">
                <property name="defaultValue">
                    <util:constant
                        static-field="net.shibboleth.profile.config.AbstractProfileConfiguration.DEFAULT_DISALLOWED_FEATURES" />
                </property>
            </bean>
        </property>
        <property name="inboundInterceptorFlowsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="inboundInterceptorFlows" />
        </property>
        <property name="outboundInterceptorFlowsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="outboundInterceptorFlows" />
        </property>
    </bean>
    
    <bean id="AbstractMDDrivenSAMLProfile" parent="AbstractMDDrivenProfile" abstract="true">
        <property name="signRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signRequests" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
    </bean>
    
    <bean id="AbstractMDDrivenSAML1AssertionProducingProfile" parent="AbstractMDDrivenSAMLProfile" abstract="true">
        <property name="signAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signAssertions" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="includeConditionsNotBeforePredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="includeConditionsNotBefore" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="assertionLifetimeLookupStrategy">
            <bean parent="shibboleth.MDDrivenDurationProperty" p:propertyName="assertionLifetime">
                <property name="defaultValue">
                    <util:constant
                        static-field="net.shibboleth.saml.profile.config.SAMLAssertionProducingProfileConfiguration.DEFAULT_ASSERTION_LIFETIME" />
                </property>
            </bean>
        </property>
        <property name="assertionAudiencesLookupStrategy">
            <bean parent="shibboleth.MDDrivenSetProperty" p:propertyName="assertionAudiences" />
        </property>
    </bean>
    
    <bean id="AbstractMDDrivenSAML2Profile" parent="AbstractMDDrivenSAMLProfile" abstract="true">
        <property name="ignoreRequestSignaturesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="ignoreRequestSignatures" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="encryptionOptionalPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptionOptional" />
                </constructor-arg>
                <constructor-arg value="%{idp.encryption.optional:false}" />
            </bean>
        </property>
        <property name="encryptNameIDsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptNameIDs" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="requestDecoratorLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="requestDecorator"
                p:propertyType="#{T(java.util.function.BiConsumer)}" />
        </property>
    </bean>

    <bean id="AbstractMDDrivenSAML2AssertionProducingProfile" parent="AbstractMDDrivenSAML2Profile" abstract="true">
        <property name="signAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signAssertions" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="includeConditionsNotBeforePredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="includeConditionsNotBefore" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="assertionLifetimeLookupStrategy">
            <bean parent="shibboleth.MDDrivenDurationProperty" p:propertyName="assertionLifetime">
                <property name="defaultValue">
                    <util:constant
                        static-field="net.shibboleth.saml.profile.config.SAMLAssertionProducingProfileConfiguration.DEFAULT_ASSERTION_LIFETIME" />
                </property>
            </bean>
        </property>
        <property name="assertionAudiencesLookupStrategy">
            <bean parent="shibboleth.MDDrivenSetProperty" p:propertyName="assertionAudiences" />
        </property>
        <property name="encryptAttributesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptAttributes" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
    </bean>

    <bean id="AbstractMDDrivenCASProfile" parent="AbstractMDDrivenProfile" abstract="true">
        <property name="resolveAttributesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="resolveAttributes" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="ticketValidityPeriodLookupStrategy">
            <bean parent="shibboleth.MDDrivenDurationProperty" p:propertyName="ticketValidityPeriod">
                <property name="defaultValue">
                    <util:constant
                        static-field="net.shibboleth.idp.cas.config.AbstractProtocolConfiguration.DEFAULT_TICKET_VALIDITY_PERIOD" />
                </property>
            </bean>
        </property>
    </bean>

    <!-- Concrete profile beans. -->

    <bean id="Shibboleth.SSO.MDDriven" parent="AbstractMDDrivenSAML1AssertionProducingProfile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml1.profile.config.impl.BrowserSSOProfileConfiguration"
            p:artifactConfiguration-ref="shibboleth.DefaultArtifactConfiguration">
        <property name="artifactConfigurationLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="artifactConfiguration"
                p:propertyType="#{T(net.shibboleth.saml.profile.config.SAMLArtifactConfiguration)}" />
        </property>
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="resolveAttributesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="resolveAttributes" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="includeAttributeStatementPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="includeAttributeStatement" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="forceAuthnPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="forceAuthn" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="defaultAuthenticationMethodsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="defaultAuthenticationMethods"
                p:propertyType="#{T(net.shibboleth.idp.saml.authn.principal.AuthenticationMethodPrincipal)}" />
        </property>
        <property name="postAuthenticationFlowsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="postAuthenticationFlows" />
        </property>
        <property name="nameIDFormatPrecedenceLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="nameIDFormatPrecedence" />
        </property>
        <property name="proxyCountLookupStrategy">
            <bean parent="shibboleth.MDDrivenIntProperty" p:propertyName="proxyCount" />
        </property>
    </bean>
    
    <bean id="SAML1.AttributeQuery.MDDriven" parent="AbstractMDDrivenSAML1AssertionProducingProfile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml1.profile.config.impl.AttributeQueryProfileConfiguration">
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="SAML1.ArtifactResolution.MDDriven" parent="AbstractMDDrivenSAMLProfile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml1.profile.config.impl.ArtifactResolutionProfileConfiguration">
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="signAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signAssertions" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
    </bean>

    <bean id="SAML2.SSO.MDDriven" parent="AbstractMDDrivenSAML2AssertionProducingProfile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml2.profile.config.impl.BrowserSSOProfileConfiguration"
            p:artifactConfiguration-ref="shibboleth.DefaultArtifactConfiguration">
        <property name="artifactConfigurationLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="artifactConfiguration"
                p:propertyType="#{T(net.shibboleth.saml.profile.config.SAMLArtifactConfiguration)}" />
        </property>
        <property name="signArtifactRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signArtifactRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.messaging.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="clientTLSArtifactRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="clientTLSArtifactRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean parent="shibboleth.Conditions.NOT">
                        <constructor-arg>
                            <bean class="org.opensaml.messaging.logic.NoIntegrityMessageChannelPredicate" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="encryptAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptAssertions" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="resolveAttributesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="resolveAttributes" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="includeAttributeStatementPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="includeAttributeStatement" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="ignoreScopingPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="ignoreScoping" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="forceAuthnPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="forceAuthn" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="net.shibboleth.idp.saml.profile.config.logic.ProxyAwareForceAuthnPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="checkAddressPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="checkAddress" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="skipEndpointValidationWhenSignedPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="skipEndpointValidationWhenSigned" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="proxyCountLookupStrategy">
            <bean parent="shibboleth.MDDrivenIntProperty" p:propertyName="proxyCount" />
        </property>
        <property name="proxyAudiencesLookupStrategy">
            <bean parent="shibboleth.MDDrivenSetProperty" p:propertyName="proxyAudiences" />
        </property>
        <property name="proxiedAuthnInstantPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="proxiedAuthnInstant" />
                </constructor-arg>
                <constructor-arg value="true" />
            </bean>
        </property>
        <property name="suppressAuthenticatingAuthorityPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="suppressAuthenticatingAuthority" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="requireSignedRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="requireSignedRequests" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="requireSignedAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="requireSignedAssertions" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="authnContextTranslationStrategyLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="authnContextTranslationStrategy"
                    p:propertyType="#{T(java.util.function.Function)}">
                <property name="defaultValue">
                    <bean class="net.shibboleth.idp.saml.authn.principal.impl.MapDrivenAuthnContextTranslationStrategy"
                        p:mappings="#{getObject('shibboleth.PrincipalProxyResponseMappings')}" />
                </property>
            </bean>
        </property>
        <property name="authnContextTranslationStrategyExLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="authnContextTranslationStrategyEx"
                    p:propertyType="#{T(java.util.function.Function)}">
            </bean>
        </property>
        <property name="authnContextComparisonLookupStrategy">
            <bean parent="shibboleth.MDDrivenStringProperty" p:propertyName="authnContextComparison">
                <property name="defaultValueStrategy">
                    <bean class="net.shibboleth.idp.saml.saml2.profile.config.navigate.ProxyAwareAuthnContextComparisonLookupFunction" />
                </property>
            </bean>
        </property>
        <property name="defaultAuthenticationMethodsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="defaultAuthenticationMethods"
                    p:propertyType="#{T(net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal)}">
                <property name="defaultValueStrategy">
		            <bean class="net.shibboleth.idp.saml.saml2.profile.config.navigate.ProxyAwareDefaultAuthenticationMethodsLookupFunction"
		                p:mappings="#{getObject('shibboleth.PrincipalProxyRequestMappings')}" />        
                </property>
            </bean>
        </property>
        <property name="postAuthenticationFlowsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="postAuthenticationFlows" />
        </property>
        <property name="nameIDFormatPrecedenceLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="nameIDFormatPrecedence" />
        </property>
        <property name="maximumSPSessionLifetimeLookupStrategy">
            <bean parent="shibboleth.MDDrivenDurationProperty" p:propertyName="maximumSPSessionLifetime" />
        </property>
        <property name="maximumTimeSinceAuthnLookupStrategy">
            <bean parent="shibboleth.MDDrivenDurationProperty" p:propertyName="maximumTimeSinceAuthn" />
        </property>
        <property name="sPNameQualifierLookupStrategy">
            <bean parent="shibboleth.MDDrivenStringProperty" p:propertyName="spNameQualifier" />
        </property>
        <property name="attributeIndexLookupStrategy">
            <bean parent="shibboleth.MDDrivenStringProperty" p:propertyName="attributeIndex" />
        </property>
    </bean>

    <bean id="SAML2.ECP.MDDriven" parent="SAML2.SSO.MDDriven" lazy-init="true"
            class="net.shibboleth.idp.saml.saml2.profile.config.impl.ECPProfileConfiguration">
        <property name="localEventsLookupStrategy">
            <bean parent="shibboleth.MDDrivenSetProperty" p:propertyName="localEvents" />
        </property>
    </bean>

    <bean id="SAML2.Logout.MDDriven" parent="AbstractMDDrivenSAML2Profile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml2.profile.config.impl.SingleLogoutProfileConfiguration"
            p:artifactConfiguration-ref="shibboleth.DefaultArtifactConfiguration">
        <property name="artifactConfigurationLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="artifactConfiguration"
                p:propertyType="#{T(net.shibboleth.saml.profile.config.SAMLArtifactConfiguration)}" />
        </property>
        <property name="signArtifactRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signArtifactRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.messaging.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="clientTLSArtifactRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="clientTLSArtifactRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean parent="shibboleth.Conditions.NOT">
                        <constructor-arg>
                            <bean class="org.opensaml.messaging.logic.NoIntegrityMessageChannelPredicate" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
        <property name="signSOAPRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signSOAPRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.messaging.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="clientTLSSOAPRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="clientTLSSOAPRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean parent="shibboleth.Conditions.NOT">
                        <constructor-arg>
                            <bean class="org.opensaml.messaging.logic.NoIntegrityMessageChannelPredicate" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
        <property name="signRequestsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signRequests" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="encryptNameIDsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptNameIDs" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoConfidentialityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="qualifiedNameIDFormatsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="qualifiedNameIDFormats" />
        </property>
    </bean>

    <bean id="SAML2.AttributeQuery.MDDriven" parent="AbstractMDDrivenSAML2AssertionProducingProfile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml2.profile.config.impl.AttributeQueryProfileConfiguration">
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="encryptAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptAssertions" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoConfidentialityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="SAML2.ArtifactResolution.MDDriven" parent="AbstractMDDrivenSAML2Profile" lazy-init="true"
            class="net.shibboleth.idp.saml.saml2.profile.config.impl.ArtifactResolutionProfileConfiguration">
        <property name="signResponsesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signResponses" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoIntegrityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="signAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="signAssertions" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="encryptAssertionsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptAssertions" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.opensaml.profile.logic.NoConfidentialityMessageChannelPredicate" />
                </constructor-arg>
            </bean>
        </property>
        <property name="encryptAttributesPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="encryptAttributes" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
    </bean>

    <!-- Remove in V6. -->
    <bean id="Liberty.SSOS.MDDriven" parent="SAML2.SSO.MDDriven" lazy-init="true"
            class="net.shibboleth.idp.saml.saml2.profile.config.impl.SSOSProfileConfiguration" />

    <bean id="CAS.LoginConfiguration.MDDriven" parent="AbstractMDDrivenCASProfile" lazy-init="true"
            class="net.shibboleth.idp.cas.config.LoginConfiguration">
        <property name="defaultAuthenticationMethodsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="defaultAuthenticationMethods"
                p:propertyType="#{T(net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal)}" />
        </property>
        <property name="postAuthenticationFlowsLookupStrategy">
            <bean parent="shibboleth.MDDrivenListProperty" p:propertyName="postAuthenticationFlows" />
        </property>
        <property name="forceAuthnPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="forceAuthn" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="storeConsentInTicketsPredicate">
            <bean class="net.shibboleth.shared.logic.PredicateSupport" factory-method="fromFunction">
                <constructor-arg>
                    <bean parent="shibboleth.MDDrivenBoolProperty" p:propertyName="storeConsentInTickets" />
                </constructor-arg>
                <constructor-arg value="false" />
            </bean>
        </property>
        <property name="proxyCountLookupStrategy">
            <bean parent="shibboleth.MDDrivenIntProperty" p:propertyName="proxyCount" />
        </property>
    </bean>

    <bean id="CAS.ProxyConfiguration.MDDriven" parent="AbstractMDDrivenCASProfile" lazy-init="true"
        class="net.shibboleth.idp.cas.config.ProxyConfiguration" />

    <bean id="CAS.ValidateConfiguration.MDDriven" parent="AbstractMDDrivenCASProfile" lazy-init="true"
            class="net.shibboleth.idp.cas.config.ValidateConfiguration">
        <property name="ticketValidityPeriodLookupStrategy">
            <bean parent="shibboleth.MDDrivenDurationProperty" p:propertyName="ticketValidityPeriod">
                <property name="defaultValue">
                    <util:constant
                        static-field="net.shibboleth.idp.cas.config.ValidateConfiguration.DEFAULT_TICKET_VALIDITY_PERIOD" />
                </property>
            </bean>
        </property>
        <property name="serviceComparatorLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="serviceComparator"
                p:propertyType="#{T(java.util.Comparator)}"
                p:defaultValue="#{getObject('shibboleth.CASServiceComparator') ?: getObject('shibboleth.DefaultCASServiceComparator')}" />
        </property>
        <property name="pGTIOUGeneratorLookupStrategy">
            <bean parent="shibboleth.MDDrivenBeanProperty" p:propertyName="pGTIOUGenerator"
                p:propertyType="#{T(net.shibboleth.shared.security.IdentifierGenerationStrategy)}" />
        </property>
        <property name="userAttributeLookupStrategy">
            <bean parent="shibboleth.MDDrivenStringProperty" p:propertyName="userAttribute" />
        </property>
    </bean>

</beans>
