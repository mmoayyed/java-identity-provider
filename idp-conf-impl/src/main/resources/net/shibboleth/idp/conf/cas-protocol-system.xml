<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

	   default-init-method="initialize"
       default-destroy-method="destroy">


    <bean id="simpleTicketService" class="net.shibboleth.idp.cas.ticket.impl.SimpleTicketService" lazy-init="true"
          c:service-ref="#{'%{idp.cas.StorageService:shibboleth.StorageService}'.trim()}" />

    <bean id="encodingTicketService" class="net.shibboleth.idp.cas.ticket.impl.EncodingTicketService" lazy-init="true"
          c:service-ref="#{'%{idp.cas.StorageService:shibboleth.StorageService}'.trim()}"
          c:sealer-ref="#{'%{idp.cas.encodedTicketSealer:encodedTicketSealer}'.trim()}" />

    <bean id="encodedTicketSealer" lazy-init="true"
          class="net.shibboleth.shared.security.DataSealer"
          p:keyStrategy-ref="#{ '%{idp.sealer.keyStrategy:shibboleth.DataSealerKeyStrategy}'.trim() }"
          p:lockedAtStartup="#{!environment.containsProperty('idp.sealer.keyStrategy') and (!environment.containsProperty('idp.sealer.storePassword') or !environment.containsProperty('idp.sealer.keyPassword')) }"
          p:encoder-ref="codec"
          p:decoder-ref="codec" />

    <!--
       | For EncodingTicketService use base-32 encoding with '-' as the padding character
       |to get tickets in the required character set: [A-Za-z0-9-]+
       -->
    <bean id="codec" class="org.apache.commons.codec.binary.Base32"
          c:_0="0"
          c:_1="#{null}"
          c:_2="false"
          c:_3="#{ T(java.lang.Integer).valueOf(45).byteValue() }"
          c:_4="#{ T(org.apache.commons.codec.CodecPolicy).STRICT }"
    />

    <alias name="encodingTicketService" alias="shibboleth.DefaultCASTicketService" />

    <bean id="proxyHttpClient" parent="shibboleth.InternalHttpClient"
          p:tLSSocketFactory-ref="shibboleth.SecurityEnhancedTLSSocketFactory" />

    <bean id="proxyHttpSecurity" class="org.opensaml.security.httpclient.HttpClientSecurityParameters">
        <property name="tLSTrustEngine">
            <bean class="org.opensaml.security.trust.impl.ChainingTrustEngine">
                <constructor-arg name="chain">
                    <list>
                        <bean class="org.opensaml.security.trust.impl.ExplicitX509CertificateTrustEngine"
                              c:resolver-ref="shibboleth.MetadataCredentialResolver" />
                        <bean parent="shibboleth.StaticPKIXTrustEngine"
                              p:certificates="#{getObject('shibboleth.CASProxyTrustedCertificates') ?: getObject('shibboleth.DefaultCASProxyTrustedCertificates')}"
                              p:checkNames="true" />
                    </list>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="shibboleth.DefaultCASProxyAuthenticator"
          class="net.shibboleth.idp.cas.proxy.impl.HttpClientProxyValidator"
          c:client="#{getObject('shibboleth.CASProxyValidatorHttpClient') ?: getObject('proxyHttpClient')}"
          c:parameters-ref="proxyHttpSecurity" />

    <bean id="shibboleth.DefaultCASProxyValidateIdPSessionPredicate" parent="shibboleth.Conditions.FALSE" />

    <bean id="shibboleth.DefaultCASServiceComparator"
          class="net.shibboleth.idp.cas.service.DefaultServiceComparator" />

    <util:list id="shibboleth.DefaultCASServiceRegistries">
        <ref bean="shibboleth.CASMetadataServiceRegistry" />
        <ref bean="shibboleth.CASServiceRegistry" />
    </util:list>

    <bean id="shibboleth.CASMetadataIndex" class="org.opensaml.saml.metadata.resolver.index.impl.EndpointMetadataIndex">
        <constructor-arg name="endpointPredicate">
            <bean class="net.shibboleth.idp.cas.service.impl.MetadataServiceRegistry.LoginEndpointPredicate" />
        </constructor-arg>
    </bean>

    <util:set id="shibboleth.CASMetadataIndices">
        <ref bean="shibboleth.CASMetadataIndex" />
    </util:set>

    <util:list id="shibboleth.DefaultCASProxyTrustedCertificates" />

    <import resource="conditional:${idp.home}/conf/cas-protocol.xml" />

</beans>
