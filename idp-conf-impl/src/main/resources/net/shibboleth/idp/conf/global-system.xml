<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <!-- Needed to allow for auto-wiring of descriptors and other components. -->
    <context:annotation-config />

    <bean id="shibboleth.PropertySourcesPlaceholderConfigurer"
        class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <!-- This bean MUST be called "conversionService" to work properly. -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="net.shibboleth.shared.spring.config.StringToIPRangeConverter" />
                <bean class="net.shibboleth.shared.spring.config.BooleanToPredicateConverter" />
                <bean class="net.shibboleth.shared.spring.config.StringBooleanToPredicateConverter" />
                <bean class="net.shibboleth.shared.spring.config.StringToResourceConverter" />
                <bean class="net.shibboleth.shared.spring.config.StringToDurationConverter" />
                <bean class="net.shibboleth.shared.spring.config.StringToPeriodConverter" />
            </set>
        </property>
    </bean>

    <!-- This BeanPostProcessor auto-sets identifiable beans with the bean name (if not already set). -->
    <bean id="shibboleth.IdentifiableBeanPostProcessor"
        class="net.shibboleth.shared.spring.config.IdentifiableBeanPostProcessor" />

    <!-- This BeanFactoryPostProcessor rewrites class and parent references to relocated classes or beans. -->
    <bean id="shibboleth.RelocatedBeanFactoryPostProcessor"
        class="net.shibboleth.shared.spring.config.RelocatedBeanFactoryPostProcessor"
        p:classes-ref="shibboleth.RelocatedClassMap"/>

    <util:map id="shibboleth.RelocatedClassMap">
        <!-- At present all of these are being added for V5 and would be removable for V6. -->
        
        <entry key="net.shibboleth.utilities.java.support.codec.StringDigester"
            value="net.shibboleth.shared.codec.StringDigester" />
        
        <entry key="net.shibboleth.utilities.java.support.logic.FunctionSupport"
            value="net.shibboleth.shared.logic.FunctionSupport" />
        <entry key="net.shibboleth.utilities.java.support.logic.PredicateSupport"
            value="net.shibboleth.shared.logic.PredicateSupport" />
        <entry key="net.shibboleth.utilities.java.support.logic.RegexPredicate"
            value="net.shibboleth.shared.logic.RegexPredicate" />
        <entry key="net.shibboleth.utilities.java.support.logic.ScriptedBiConsumer"
            value="net.shibboleth.shared.logic.ScriptedBiConsumer" />
        <entry key="net.shibboleth.utilities.java.support.logic.ScriptedBiFunction"
            value="net.shibboleth.shared.logic.ScriptedBiFunction" />
        <entry key="net.shibboleth.utilities.java.support.logic.ScriptedBiPredicate"
            value="net.shibboleth.shared.logic.ScriptedBiPredicate" />
        <entry key="net.shibboleth.utilities.java.support.logic.ScriptedConsumer"
            value="net.shibboleth.shared.logic.ScriptedConsumer" />
        <entry key="net.shibboleth.utilities.java.support.logic.ScriptedFunction"
            value="net.shibboleth.shared.logic.ScriptedFunction" />
        <entry key="net.shibboleth.utilities.java.support.logic.ScriptedPredicate"
            value="net.shibboleth.shared.logic.ScriptedPredicate" />
        <entry key="net.shibboleth.utilities.java.support.logic.StrategyIndirectedPredicate"
            value="net.shibboleth.shared.logic.StrategyIndirectedPredicate" />
        
        <entry key="net.shibboleth.utilities.java.support.net.DynamicResponseHeaderFilter"
            value="net.shibboleth.shared.net.impl.DynamicResponseHeaderFilter" />
        <entry key="net.shibboleth.utilities.java.support.net.SameSiteCookieHeaderFilter"
            value="net.shibboleth.shared.net.impl.SameSiteCookieHeaderFilter" />
        
        <entry key="net.shibboleth.utilities.java.support.velocity.Template"
            value="net.shibboleth.shared.velocity.Template" />
        
        <entry key="net.shibboleth.ext.spring.factory.KeyStoreFactoryBean"
            value="net.shibboleth.shared.spring.security.factory.KeyStoreFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.PKCS11PrivateKeyFactoryBean"
            value="net.shibboleth.shared.spring.security.factory.PKCS11PrivateKeyFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.PrivateKeyFactoryBean"
            value="net.shibboleth.shared.spring.security.factory.PrivateKeyFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.PublicKeyFactoryBean"
            value="net.shibboleth.shared.spring.security.factory.PublicKeyFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean"
            value="net.shibboleth.shared.spring.security.factory.X509CertificateFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.X509CertificateChainFactoryBean"
            value="net.shibboleth.shared.spring.security.factory.X509CertificateChainFactoryBean" />
            
        <entry key="net.shibboleth.ext.spring.resource.HTTPResource"
            value="net.shibboleth.shared.spring.httpclient.resource.HTTPResource" />
        <entry key="net.shibboleth.ext.spring.resource.FileBackedHTTPResource"
            value="net.shibboleth.shared.spring.httpclient.resource.FileBackedHTTPResource" />
            
        <entry key="net.shibboleth.ext.spring.util.SpringExpressionBiConsumer"
            value="net.shibboleth.shared.spring.expression.SpringExpressionBiConsumer" />
        <entry key="net.shibboleth.ext.spring.util.SpringExpressionBiFunction"
            value="net.shibboleth.shared.spring.expression.SpringExpressionBiFunction" />
        <entry key="net.shibboleth.ext.spring.util.SpringExpressionBiPredicate"
            value="net.shibboleth.shared.spring.expression.SpringExpressionBiPredicate" />
        <entry key="net.shibboleth.ext.spring.util.SpringExpressionConsumer"
            value="net.shibboleth.shared.spring.expression.SpringExpressionConsumer" />
        <entry key="net.shibboleth.ext.spring.util.SpringExpressionFunction"
            value="net.shibboleth.shared.spring.expression.SpringExpressionFunction" />
        <entry key="net.shibboleth.ext.spring.util.SpringExpressionPredicate"
            value="net.shibboleth.shared.spring.expression.SpringExpressionPredicate" />
            
        <entry key="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
            value="net.shibboleth.shared.spring.factory.CombiningListFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.DOMDocumentFactoryBean"
            value="net.shibboleth.shared.spring.factory.DOMDocumentFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.EvaluableScriptFactoryBean"
            value="net.shibboleth.shared.spring.factory.EvaluableScriptFactoryBean" />
        <entry key="net.shibboleth.ext.spring.factory.PatternFactoryBean"
            value="net.shibboleth.shared.spring.factory.PatternFactoryBean" />

        <entry key="net.shibboleth.ext.spring.resource.ConditionalResource"
            value="net.shibboleth.shared.spring.resource.ConditionalResource" />
        <entry key="net.shibboleth.ext.spring.resource.RunnableFileSystemResource"
            value="net.shibboleth.shared.spring.resource.RunnableFileSystemResource" />
    </util:map>

    <!-- This extends the original user-space resource list with the classpath-embedded message tree. -->
    <bean id ="ExtendedMessageSourceResources" parent="shibboleth.ListCombiner"
          p:firstList-ref="#{'%{idp.message.resources:shibboleth.MessageSourceResources}'.trim()}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/messages/messages</value>
            </util:list>
        </property>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
            p:cacheSeconds="%{idp.message.cacheSeconds:300}"
            p:basenames-ref="ExtendedMessageSourceResources"
            p:defaultEncoding="UTF-8" />

    <import resource="${idp.home}/conf/global.xml" />
    <import resource="${idp.home}/conf/errors.xml" />
    <import resource="audit-system.xml" />
    <import resource="authn-system.xml" />
    <import resource="session-manager-system.xml" />
    <import resource="security-system.xml" />
    <import resource="services-system.xml" />
    <import resource="saml-binding-config.xml" />
    <import resource="subject-c14n-system.xml" />
    <import resource="profile-intercept-system.xml" />
    <import resource="cas-protocol-system.xml" />
    <import resource="admin-system.xml" />
    <import resource="primitives.xml" />
    <import resource="conditions.xml" />
    <import resource="functions.xml" />
    <import resource="http-client.xml" />
    <import resource="soap-client.xml" />
    <import resource="saml-utilities.xml" />
    <import resource="sealer.xml" />
    <import resource="filters.xml" />

    <bean id="systemPrereqs" class="org.springframework.beans.factory.config.MethodInvokingBean"
            p:targetObject-ref="systemProperties" p:targetMethod="putAll">
        <property name="arguments">
            <props>
                <prop key="org.apache.xml.security.ignoreLineBreaks">%{idp.apache.xml.security.ignoreLineBreaks:true}</prop>
            </props>
        </property>
    </bean>

    <bean id="shibboleth.OpenSAMLConfig" class="net.shibboleth.idp.spring.OpenSAMLConfigBean"
        depends-on="systemPrereqs,shibboleth.LoggingService"
        p:parserPool-ref="shibboleth.ParserPool"
        p:metricRegistry-ref="shibboleth.metrics.MetricRegistry" />

    <bean class="net.shibboleth.idp.admin.impl.LogImplementationDetails" c:_0="%{idp.home}" />

    <bean class="net.shibboleth.idp.spring.DeprecatedPropertyBean">
        <property name="deprecatedProperties">
            <map>
                <entry key="idp.httpclient.useTrustEngineTLSSocketFactory" value="idp.httpclient.useSecurityEnhancedTLSSocketFactory" />
                <entry key="idp.xml.securityManager">
                    <null/>
                </entry>
                <entry key="idp.authn.LDAP.validateDN" value="idp.pool.LDAP.validateDN" />
                <entry key="idp.consent.userStorageKey" value="idp.consent.attribute-release.userStorageKey" />
                <entry key="idp.consent.userStorageKeyAttribute" value="idp.consent.attribute-release.userStorageKeyAttribute" />
                <entry key="idp.persistentId.store" value="idp.persistentId.generator" />
             </map>
        </property>
        <property name="deadProperties">
            <list>
                <value>idp.authn.flows.initial</value>
                <value>idp.authn.resolveAttribute</value>
                <value>idp.authn.SAML.inboundMessageHandlerFunction</value>
                <value>idp.authn.SAML.outboundMessageHandlerFunction</value>
                <value>idp.nameid.saml1.legacyGenerator</value>
                <value>idp.nameid.saml2.legacyGenerator</value>
                <value>idp.service.attribute.registry.namingRegistry</value>
                <value>idp.service.attribute.resolver.suppressDisplayInfo</value>
            </list>
        </property>
    </bean>

    <util:map id="shibboleth.DefaultVelocityEngineProperties">
        <entry key="parser.space_gobbling" value="%{idp.velocity.space.gobbling:bc}" />
        <entry key="resource.loaders" value="file, classpath, string" />
        <entry key="resource.loader.classpath.class" value="org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" />
        <entry key="resource.loader.string.class" value="org.apache.velocity.runtime.resource.loader.StringResourceLoader" />
        <entry key="resource.loader.file.class" value="org.apache.velocity.runtime.resource.loader.FileResourceLoader" />
        <entry key="resource.loader.file.path" value="#{'%{idp.views:%{idp.home}/views}'.trim()}" />
        <entry key="resource.loader.file.cache" value="false" />
        <entry key="runtime.strict_mode.enable" value="%{idp.velocity.runtime.strictmode:false}" />
    </util:map>

    <bean id="shibboleth.VelocityEngine" class="net.shibboleth.shared.spring.velocity.VelocityEngineFactoryBean"
        depends-on="shibboleth.LoggingService"
        p:velocityPropertiesMap="#{getObject('shibboleth.VelocityEngineProperties') ?: getObject('shibboleth.DefaultVelocityEngineProperties')}" />

    <alias name="%{idp.xml.parserPool:shibboleth.DefaultParserPool}" alias="shibboleth.ParserPool"/>

    <bean id="shibboleth.DefaultParserPool" class="net.shibboleth.shared.xml.impl.BasicParserPool"
            depends-on="shibboleth.LoggingService" lazy-init="true"
            p:maxPoolSize="100"
            p:coalescing="true"
            p:ignoreComments="true"
            p:ignoreElementContentWhitespace="true"
            p:namespaceAware="true"
            p:entityResolver="#{%{idp.xml.strictEntityResolution:true} ? getObject('shibboleth.ThrowingEntityResolver') : null}"
            p:securityManagerAttributeName="http://apache.org/xml/properties/security-manager">
        <property name="builderFeatures">
            <map>
                <entry key="http://apache.org/xml/features/disallow-doctype-decl">
                    <util:constant static-field="java.lang.Boolean.TRUE" />
                </entry>
                <entry key="http://apache.org/xml/features/validation/schema/normalized-value">
                    <util:constant static-field="java.lang.Boolean.FALSE" />
                </entry>
                <entry key="http://javax.xml.XMLConstants/feature/secure-processing">
                    <util:constant static-field="java.lang.Boolean.TRUE" />
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="shibboleth.ThrowingEntityResolver"
        class="net.shibboleth.shared.xml.impl.ThrowingEntityResolver" lazy-init="true" />

    <!--  Bean used by the SchemaValidation metadata filter and anything else doing basic schema validation. -->
    <bean id="shibboleth.SchemaBuilder" lazy-init="true"
        class="org.opensaml.saml.common.xml.SAMLSchemaBuilder" c:ver="SAML_11" c:strict="%{idp.schemaValidation.strict:false}">
        <property name="schemaBuilder">
            <bean class="net.shibboleth.shared.xml.SchemaBuilder"
                    p:schemaResources="#{getObject('shibboleth.ExtensionSchemas') ?: getObject('shibboleth.DefaultExtensionSchemas')}">
                <property name="resourceResolver">
                    <bean class="net.shibboleth.shared.xml.ClasspathResolver" />
                </property>
            </bean>
        </property>
    </bean>

    <util:list id="shibboleth.DefaultExtensionSchemas">
        <value>#{'classpath:' + T(org.opensaml.saml.common.xml.SAMLConstants).XMLSIG_SCHEMA_LOCATION }</value>
        <value>#{'classpath:' + T(net.shibboleth.idp.saml.xmlobject.ExtensionsConstants).SHIB_MDEXT10_SCHEMA_LOCATION }</value>
    </util:list>


    <bean id="shibboleth.BuilderFactory" factory-method="getBuilderFactory" class="org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport" depends-on="shibboleth.OpenSAMLConfig" />
    <bean id="shibboleth.MarshallerFactory" factory-method="getMarshallerFactory" class="org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport" depends-on="shibboleth.OpenSAMLConfig" />
    <bean id="shibboleth.UnmarshallerFactory" factory-method="getUnmarshallerFactory" class="org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport" depends-on="shibboleth.OpenSAMLConfig" />

    <bean id="shibboleth.CookieManager" class="net.shibboleth.shared.net.CookieManager"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:httpServletResponseSupplier-ref="shibboleth.HttpServletResponseSupplier"
        p:secure="%{idp.cookie.secure:true}"
        p:httpOnly="%{idp.cookie.httpOnly:true}"
        p:cookieDomain="%{idp.cookie.domain:}"
        p:cookiePath="%{idp.cookie.path:}"
        p:maxAge="-1" />

    <bean id="shibboleth.PersistentCookieManager" class="net.shibboleth.shared.net.CookieManager"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:httpServletResponseSupplier-ref="shibboleth.HttpServletResponseSupplier"
        p:secure="%{idp.cookie.secure:true}"
        p:httpOnly="%{idp.cookie.httpOnly:true}"
        p:cookieDomain="%{idp.cookie.domain:}"
        p:cookiePath="%{idp.cookie.path:}"
        p:maxAge="%{idp.cookie.maxAge:31536000}" />

    <bean id="shibboleth.UserPrefsCookieManager" class="net.shibboleth.shared.net.CookieManager"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:httpServletResponseSupplier-ref="shibboleth.HttpServletResponseSupplier"
        p:secure="%{idp.cookie.secure:true}"
        p:httpOnly="false"
        p:cookieDomain="%{idp.cookie.domain:}"
        p:cookiePath="%{idp.cookie.path:}"
        p:maxAge="%{idp.cookie.maxAge:31536000}" />

    <bean id="shibboleth.StorageService" lazy-init="true"
        class="%{idp.storage.StorageService:org.opensaml.storage.impl.MemoryStorageService}"
        p:cleanupInterval="%{idp.storage.cleanupInterval:PT10M}" />

    <bean id="shibboleth.ClientSessionStorageService" lazy-init="true"
        class="org.opensaml.storage.impl.client.ClientStorageService"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:cookieManager-ref="shibboleth.CookieManager"
        p:storageName="%{idp.storage.clientSessionStorageName:shib_idp_session_ss}"
        p:dataSealer-ref="shibboleth.DataSealer" />

    <bean id="shibboleth.ClientPersistentStorageService" lazy-init="true"
        class="org.opensaml.storage.impl.client.ClientStorageService"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:cookieManager-ref="shibboleth.PersistentCookieManager"
        p:storageName="%{idp.storage.clientPersistentStorageName:shib_idp_persistent_ss}"
        p:dataSealer-ref="shibboleth.DataSealer"
        p:keyStrategy-ref="#{ '%{idp.sealer.keyStrategy:shibboleth.DataSealerKeyStrategy}'.trim() }" />

    <!--
    Default list of ClientStorageService plugins needed for injection into storage read/write flows.
    -->
    <bean id="shibboleth.DefaultClientStorageServices" lazy-init="true"
            class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="shibboleth.ClientSessionStorageService" />
                <ref bean="shibboleth.ClientPersistentStorageService" />
            </list>
        </property>
    </bean>

    <bean id="shibboleth.ReplayCache" class="org.opensaml.storage.impl.StorageServiceReplayCache"
        p:storage-ref="#{'%{idp.replayCache.StorageService:shibboleth.StorageService}'.trim()}"
        p:strict="%{idp.replayCache.strict:true}" />

    <bean id="shibboleth.SAMLArtifactMap" depends-on="shibboleth.StorageService"
        class="org.opensaml.saml.common.binding.artifact.impl.StorageServiceSAMLArtifactMap"
        p:storageService-ref="#{'%{idp.artifact.StorageService:shibboleth.StorageService}'.trim()}" />

    <bean id="shibboleth.StorageBackedAccountLockoutManager" abstract="true"
            class="net.shibboleth.idp.authn.impl.StorageBackedAccountLockoutManager"
            p:storageService-ref="shibboleth.StorageService">
        <property name="lockoutKeyStrategy">
            <bean class="net.shibboleth.idp.authn.impl.StorageBackedAccountLockoutManager.UsernameIPLockoutKeyStrategy"
                p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier" />
        </property>
    </bean>

    <bean id="shibboleth.NonFailFastValidator"
        class="net.shibboleth.idp.attribute.resolver.dc.NonFailFastValidator" lazy-init="true" />

    <bean class="net.shibboleth.shared.spring.config.DeprecatedBeanDetector" c:_1="global.xml">
        <constructor-arg index="0">
            <map>
                <entry key="shibboleth.SignatureWhitelist" value="shibboleth.IncludedSignatureAlgorithms" />
                <entry key="shibboleth.SignatureBlacklist" value="shibboleth.ExcludedSignatureAlgorithms" />
                <entry key="shibboleth.EncryptionWhitelist" value="shibboleth.IncludedEncryptionAlgorithms" />
                <entry key="shibboleth.EncryptionBlacklist" value="shibboleth.ExcludedEncryptionAlgorithms" />
            </map>
        </constructor-arg>
    </bean>

    <!-- Default Jackson ObjectMapper. -->
    
    <bean id="shibboleth.JSONObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />

    <bean class="org.springframework.beans.factory.config.MethodInvokingBean"
            p:targetObject-ref="shibboleth.JSONObjectMapper"
            p:targetMethod="setSerializationInclusion">
        <property name="arguments">
            <util:constant static-field="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL" />
        </property>
    </bean>
    
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean"
            p:targetObject-ref="shibboleth.JSONObjectMapper"
            p:targetMethod="registerModule">
        <property name="arguments">
            <bean class="com.fasterxml.jackson.datatype.jsr310.JavaTimeModule" />
        </property>
    </bean>

    <bean class="org.springframework.beans.factory.config.MethodInvokingBean"
            p:targetObject-ref="shibboleth.JSONObjectMapper"
            p:targetMethod="setDateFormat">
        <property name="arguments">
            <bean class="java.text.SimpleDateFormat" c:_0="yyyy-MM-dd'T'HH:mm:ss.SSSX" />
        </property>
    </bean>
    
    <!-- Action bean templates. -->
    
    <bean id="shibboleth.AuditFormattingMapParser"
        class="net.shibboleth.idp.profile.audit.impl.PopulateAuditContext.FormattingMapParser"
        c:_0-ref="shibboleth.AuditFormattingMap" />
    
    <bean id="shibboleth.AbstractPopulateAuditContext" abstract="true"
        class="net.shibboleth.idp.profile.audit.impl.PopulateAuditContext" scope="prototype"
        p:formattingMapParser-ref="shibboleth.AuditFormattingMapParser"
        p:dateTimeFormat="#{getObject('shibboleth.AuditDateTimeFormat')}"
        p:useDefaultTimeZone="#{getObject('shibboleth.AuditDefaultTimeZone') ?: false}"
        p:fieldReplacements="#{getObject('shibboleth.AuditFieldReplacementMap')}" />

    <!-- Bean used internally to flows to log uncaught exceptions. -->
    <bean id="LogRuntimeException" class="net.shibboleth.idp.profile.LogRuntimeException" />

    <!-- Default attribute mapping support for registry service, exposed here for extension use. -->

    <bean id="shibboleth.RegistryNamingFunction" abstract="true"
        class="net.shibboleth.idp.attribute.transcoding.BasicNamingFunction" />

    <!-- Built-in naming functions. -->
    <bean parent="shibboleth.RegistryNamingFunction" c:claz="org.opensaml.saml.saml2.core.Attribute">
        <constructor-arg name="function">
            <bean class="net.shibboleth.idp.saml.attribute.transcoding.AbstractSAML2AttributeTranscoder.NamingFunction" />
        </constructor-arg>    
    </bean>
    <bean parent="shibboleth.RegistryNamingFunction" c:claz="org.opensaml.saml.saml1.core.AttributeDesignator">
        <constructor-arg name="function">
            <bean class="net.shibboleth.idp.saml.attribute.transcoding.AbstractSAML1AttributeTranscoder.NamingFunction" />
        </constructor-arg>    
    </bean>
    <bean parent="shibboleth.RegistryNamingFunction" c:claz="net.shibboleth.idp.cas.attribute.Attribute">
        <constructor-arg name="function">
            <bean class="net.shibboleth.idp.cas.attribute.AbstractCASAttributeTranscoder.NamingFunction" />
        </constructor-arg>    
    </bean>

 </beans>
