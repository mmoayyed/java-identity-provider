<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
          http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="cas.abstract">

    <action-state id="InitializeLogin">
        <evaluate expression="InitializeProfileRequestContext"/>
        <evaluate expression="FlowStartPopulateAuditContext" />
        <evaluate expression="PopulateMetricContext" />
        <evaluate expression="InitializeLogin" />
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="ContinueLogin" />
    </action-state>

    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ContinueLogin"/>
    </subflow-state>

    <action-state id="ContinueLogin">
        <evaluate expression="BuildRelyingPartyContext" />
        <evaluate expression="BuildSAMLMetadataContext" />
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <evaluate expression="SelectProfileConfiguration" />
        <evaluate expression="PublishProtocolRequest" />
        <evaluate expression="PopulateInboundInterceptContext" />
        <evaluate expression="PopulateUserAgentContext"/>
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckInboundInterceptContext" />
    </action-state>

    <decision-state id="CheckInboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="AuthenticationSetup"
            else="DoInboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoInboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="AuthenticationSetup" />
    </subflow-state>

    <action-state id="AuthenticationSetup">
        <evaluate expression="BuildAuthenticationContext"/>
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckResolveAttributes" />
        <transition on="NoPassive" to="PassiveFailureReturnToService" />
        <transition on="RestartAuthentication" to="AuthenticationSetup" />
    </subflow-state>

    <action-state id="PassiveFailureReturnToService">
        <set name="flowScope.redirectUrl" value="flowScope.serviceTicketRequest.service" />
        <transition to="CheckOutboundInterceptContext" />
    </action-state>

    <decision-state id="CheckResolveAttributes">
        <if test="LoginConfigLookup.apply(opensamlProfileRequestContext).isResolveAttributes(opensamlProfileRequestContext)"
            then="ResolveAttributes"
            else="PopulatePostAuthnInterceptContext" />
    </decision-state>

    <action-state id="ResolveAttributes">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="PopulatePostAuthnInterceptContext" />
    </action-state>

    <action-state id="PopulatePostAuthnInterceptContext">
        <evaluate expression="PopulatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
    </action-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="GrantServiceTicket"
            else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="GrantServiceTicket" />
        <transition on="UpdateSecurityParameters" to="GrantServiceTicket" />
        <transition on="RestartAuthentication" to="AuthenticationSetup" />
    </subflow-state>

    <action-state id="GrantServiceTicket">
        <evaluate expression="GrantServiceTicket" />
        <evaluate expression="UpdateIdPSessionWithSPSession" />
        <evaluate expression="PublishProtocolResponse" />
        <evaluate expression="PopulateOutboundInterceptContext" />
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="CheckOutboundInterceptContext">
            <set name="flowScope.redirectUrl" value="flowScope.serviceTicketResponse.redirectUrl" />
        </transition>
    </action-state>

    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckOutboundInterceptContext">
            <set name="flowScope.redirectUrl" value="flowScope.serviceTicketResponse.redirectUrl" />
        </transition>
    </subflow-state>

    <decision-state id="CheckOutboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="ReturnToService"
            else="DoOutboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoOutboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ReturnToService" />
        <transition to="HandleError" />
    </subflow-state>

    <decision-state id="ReturnToService">
        <if test="flowScope.serviceTicketRequest.method == 'POST'"
            then="PostBackToService"
            else="RedirectToService" />
    </decision-state>

    <!-- End states -->
    <end-state id="RedirectToService" view="externalRedirect:#{flowScope.redirectUrl}">
        <on-entry>
            <evaluate expression="PopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
        </on-entry>
    </end-state>

    <end-state id="PostBackToService" view="cas/postBack">
        <on-entry>
            <evaluate expression="PopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <set name="requestScope.service" value="flowScope.serviceTicketResponse.service" />
            <set name="requestScope.ticketParamName" value="flowScope.serviceTicketResponse.ticketParameterName" />
            <set name="requestScope.ticket" value="flowScope.serviceTicketResponse.ticket" />
        </on-entry>
    </end-state>

    <bean-import resource="login-beans.xml" />

</flow>