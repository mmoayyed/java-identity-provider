<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="saml.abstract">

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <on-start>
        <set name="conversationScope.LogoutStatus" value="true" />
    </on-start>
    
    <action-state id="InitializeProfileRequestContext">
        <on-entry>
            <set name="flowScope.inboundSecuritySubflow" value="'intercept/security-policy/saml2-slo'" />
        </on-entry>
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="FlowStartPopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <action-state id="DoProfileWork">
        <evaluate expression="ProcessLogoutRequest" />
        <evaluate expression="LogoutPopulateAuditContext" />
        <evaluate expression="DestroySessions" />

        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckForSessions" />
    </action-state>

    <decision-state id="CheckForSessions">
        <if test="opensamlProfileRequestContext.ensureSubcontext(T(net.shibboleth.idp.session.context.LogoutContext)).getSessionMap().isEmpty()"
            then="CheckAsync"
            else="SaveProfileRequestContextTree" />
    </decision-state>

    <action-state id="SaveProfileRequestContextTree">
        <evaluate expression="SaveProfileRequestContextTree" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateNextLogoutPropagationContext" />
    </action-state>

    <action-state id="PopulateNextLogoutPropagationContext">
        <evaluate expression="PopulateLogoutPropagationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PropagateLogout" />
        <transition on="SessionNotFound" to="RestoreProfileRequestContextTree" />
    </action-state>
    
    <action-state id="PropagateLogout">
        <evaluate expression="SelectPropagationFlow" />
        
        <!-- Call a subflow with the same ID as the event. -->
        <transition on="#{currentEvent.id.startsWith('logoutprop/')}" to="CallPropagationFlow" />

        <!-- Try the next RP's session(s), and record overall failure. -->
        <transition to="PopulateNextLogoutPropagationContext">
            <set name="conversationScope.LogoutStatus" value="false" />
        </transition>
    </action-state>

    <!-- This invokes a propagation flow. We check for failure but otherwise just keep iterating. -->
    <subflow-state id="CallPropagationFlow" subflow="#{currentEvent.id}">
        <input name="calledAsSubflow" value="true" />
        <transition to="PopulateNextLogoutPropagationContext" />
        <on-exit>
            <evaluate expression="WriteAuditLog" />
            <!-- If overall status remains positive, intersect with the last propagation result's success. -->
            <evaluate expression="conversationScope.LogoutStatus and opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutPropagationContext)).getResult() == T(net.shibboleth.idp.session.context.LogoutPropagationContext.Result).Success"
                result="conversationScope.LogoutStatus" />
            <evaluate expression="opensamlProfileRequestContext.removeSubcontext(T(net.shibboleth.idp.session.context.LogoutPropagationContext))" />
            <evaluate expression="opensamlProfileRequestContext.removeSubcontext(T(net.shibboleth.profile.context.AuditContext))" />
        </on-exit>
    </subflow-state>
    
    <action-state id="RestoreProfileRequestContextTree">
        <evaluate expression="RestoreProfileRequestContextTree" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckAsync" />    
    </action-state>
    
    <decision-state id="CheckAsync">
        <if test="opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions() == null or opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions().getUnknownXMLObjects(T(org.opensaml.saml.ext.saml2aslo.Asynchronous).DEFAULT_ELEMENT_NAME).isEmpty()"
            then="BuildResponse" else="DoAsync" />
    </decision-state>
    
    <action-state id="DoAsync">
        <evaluate expression="'AsyncLogout'" />
        <transition to="HandleSuccessWithView" />
    </action-state>
    
    <end-state id="HandleSuccessWithView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.shared.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CSPDigester')" result="requestScope.cspDigester" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CSPNonce')" result="requestScope.cspNonce" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>
    
    <action-state id="BuildResponse">
        <evaluate expression="AddLogoutResponse" />
        <evaluate expression="AddInResponseToToResponse" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckForPartialLogout" />
    </action-state>
    
    <decision-state id="CheckForPartialLogout">
        <if test="conversationScope.LogoutStatus"
            then="CompleteResponse" else="PartialLogout" />
    </decision-state>
    
    <action-state id="PartialLogout">
        <evaluate expression="AddPartialLogoutStatusToResponse" />
        
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CompleteResponse" />
    </action-state>

    <action-state id="CompleteResponse">
        <evaluate expression="PostResponsePopulateAuditContext" />
        
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ReturnToParentFlow" />
    </action-state>

    <!-- Error Response Generation -->

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleError">
        <on-entry>
            <evaluate expression="LogEvent" />
        </on-entry>
        <evaluate expression="RestoreProfileRequestContextTree" />
        <evaluate expression="InitializeOutboundMessageContextForError" />
        <evaluate expression="AddLogoutResponse" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        
        <evaluate expression="PostResponsePopulateAuditContext" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <bean-import resource="slo-back-beans.xml" />

</flow>
