<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">

    <!-- Rewrite the profile ID so that configuration is driven by the SAML2 SLO profile config. -->
    <on-start>
        <evaluate expression="opensamlProfileRequestContext.setProfileId(T(net.shibboleth.saml.saml2.profile.config.SingleLogoutProfileConfiguration).PROFILE_ID)" />
    </on-start>

    <action-state id="PrepareContextTree">
        <evaluate expression="PrepareInboundMessageContext" />
        <evaluate expression="SAMLProtocolAndRole" />
        <evaluate expression="SAMLMetadataLookup" />

        <evaluate expression="InitializeRelyingPartyContextFromSAMLPeer" />
        <evaluate expression="SelectRelyingPartyConfiguration" />

        <evaluate expression="PostLookupPopulateAuditContext" />
        
        <evaluate expression="SelectProfileConfiguration" />
        
        <evaluate expression="InitializeOutboundMessageContext" />
        <evaluate expression="InitializeMessageChannelSecurityContext" />
        <evaluate expression="PopulateLogoutBindingAndEndpointContexts" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckForSynchronousBinding1" />
    </action-state>
    
    <decision-state id="CheckForSynchronousBinding1">
        <if test="opensamlProfileRequestContext.getOutboundMessageContext().getSubcontext('org.opensaml.saml.common.messaging.context.SAMLBindingContext').getBindingDescriptor().isSynchronous()"
            then="PrepareRequest"
            else="PopulateNonSOAPRequestSignatureSigningParameters"/>
    </decision-state>
    
    <action-state id="PopulateNonSOAPRequestSignatureSigningParameters">
        <evaluate expression="PopulateRequestSignatureSigningParameters" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PrepareRequest" />
    </action-state>
    
    <action-state id="PrepareRequest">
        <evaluate expression="PopulateEncryptionParameters" />
        <evaluate expression="AddLogoutRequest" />
        <evaluate expression="LogoutPopulateAuditContext" />
        <evaluate expression="EncryptNameIDs" />
        <evaluate expression="PostResponsePopulateAuditContext" />
        <evaluate expression="PopulateOutboundInterceptContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckOutboundInterceptContext" />
    </action-state>

    <decision-state id="CheckOutboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="CheckForSynchronousBinding2" else="DoOutboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoOutboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckForSynchronousBinding2" />
    </subflow-state>

    <decision-state id="CheckForSynchronousBinding2">
        <if test="opensamlProfileRequestContext.getOutboundMessageContext().getSubcontext('org.opensaml.saml.common.messaging.context.SAMLBindingContext').getBindingDescriptor().isSynchronous()"
            then="HandleBackChannelMessage"
            else="HandleOutboundMessage"/>
    </decision-state>

    <action-state id="HandleBackChannelMessage">
        <evaluate expression="SOAPLogoutRequest" />
        <evaluate expression="PostDecodePopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="proceed" />
    </action-state>

    <action-state id="HandleOutboundMessage">
        <evaluate expression="HandleOutboundMessage" />
        <evaluate expression="EncodeMessage" />
        <evaluate expression="RecordResponseComplete" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="LogoutPending" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="LogRuntimeException.log('net.shibboleth.idp.saml.profile', flowExecutionException)" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        
        <transition to="proceed" />
    </action-state>
    
    <!-- Successful terminal state (success meaning outbound LogoutRequest encoded). -->

    <end-state id="LogoutPending">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
        </on-entry>
    </end-state>

    <!--
    Terminal states. This is usually "proceed" because the parent flow will respond to that
    by emitting the outcome in the LogoutPropagationContext, which is set appropriately.
    -->
    <end-state id="proceed"/>
    <end-state id="InvalidProfileConfiguration" />
    <end-state id="EndpointResolutionFailed" />

    <!--
    Catch-all is to turn non-proceed events into an error, which in this special flow is actually "proceed".
    Some specifically interesting events are captured.
    -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="InvalidProfileConfiguration" to="InvalidProfileConfiguration" />
        <transition on="EndpointResolutionFailed" to="EndpointResolutionFailed" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="proceed" />
    </global-transitions>
    
    <bean-import resource="saml2-logoutprop-beans.xml" />

</flow>
