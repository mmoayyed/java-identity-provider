<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
    default-init-method="initialize"
    default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.shared.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <bean id="InitializeProfileRequestContext"
        class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext" scope="prototype"
        p:profileId-ref="shibboleth.AdminProfileId" />

    <bean id="FlowStartPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.FlowStartAuditExtractors') ?: getObject('shibboleth.DefaultFlowStartAuditExtractors')}" />

    <bean id="PopulateMetricContext"
        class="org.opensaml.profile.action.impl.PopulateMetricContext" scope="prototype"
        p:metricStrategy="#{getObject('shibboleth.metrics.MetricStrategy')}" />
    
    <!--
    The collection selection expression works because Spring converts the first member of a collection into
    a compatible singleton for a property.
    -->
    <bean id="InitializeAdministrativeProfileContextTree"
            class="net.shibboleth.idp.admin.impl.InitializeAdministrativeProfileContextTree" scope="prototype"
            p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
            p:administrativeFlowDescriptor="#{@'shibboleth.AdministrativeFlowDescriptorManager'.getComponents().?[id == @'shibboleth.AdminProfileId']}">
        <property name="fallbackLanguages">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.ui.fallbackLanguages:}'.trim()}" />
        </property>
    </bean>

    <!-- Session / Authn /Authz -->

    <bean id="PopulateClientStorageLoadContext"
        class="org.opensaml.storage.impl.client.PopulateClientStorageLoadContext" scope="prototype"
        p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

    <bean id="InitializeAuthenticationContext"
        class="net.shibboleth.idp.saml.profile.impl.InitializeAuthenticationContext" scope="prototype" />

    <bean id="InitializeRequestedPrincipalContext"
        class="net.shibboleth.idp.authn.impl.InitializeRequestedPrincipalContext" scope="prototype" />

    <bean id="ResolveAttributes" class="net.shibboleth.idp.profile.impl.ResolveAttributes" scope="prototype"
        c:resolverService-ref="shibboleth.AttributeResolverService"
        p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

    <bean id="PopulatePostAuthnInterceptContext"
            class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
            p:availableFlows="#{@'shibboleth.ProfileInterceptorFlowDescriptorManager'.getComponents()}"
            p:loggingLabel="post-authn">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="PopulateClientStorageSaveContext"
        class="org.opensaml.storage.impl.client.PopulateClientStorageSaveContext" scope="prototype"
        p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

    <!-- General access check that applies a fixed policy with no operation/resource. -->
    
    <bean id="CheckAccess"
        class="org.opensaml.profile.action.impl.CheckAccess" scope="prototype"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:accessControlService-ref="shibboleth.AccessControlService"
        p:policyNameLookupStrategy-ref="DescriptorPolicyLookupStrategy"
        p:operationLookupStrategy="#{getObject('shibboleth.AdminOperationLookupStrategy') ?: getObject('DefaultOperationLookupStrategy')}"
        p:resourceLookupStrategy="#{getObject('shibboleth.AdminResourceLookupStrategy') ?: getObject('DefaultResourceLookupStrategy')}" />

    <bean id="DescriptorPolicyLookupStrategy"
        class="net.shibboleth.idp.profile.context.navigate.SpringExpressionContextLookupFunction"
        c:inClass="#{T(org.opensaml.profile.context.ProfileRequestContext)}"
        c:outputType="#{T(java.lang.String)}"
        c:expression="#input.getSubcontext(T(net.shibboleth.profile.context.RelyingPartyContext)).getProfileConfig().getPolicyName(#input)" />

    <!-- Default operation/resource suppliers for access checks. -->
    <bean id="DefaultOperationLookupStrategy" parent="shibboleth.Functions.Constant">
        <constructor-arg>
            <null/>
        </constructor-arg>
    </bean>
    <bean id="DefaultResourceLookupStrategy" parent="shibboleth.Functions.Constant">
        <constructor-arg>
            <null/>
        </constructor-arg>
    </bean>

    <!-- Logging -->

    <bean id="LogEvent" class="org.opensaml.profile.action.impl.LogEvent" scope="prototype"
            p:suppressedEvents="#{getObject('shibboleth.SuppressedEvents') ?: getObject('shibboleth.DefaultSuppressedEvents')}">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
    </bean>
        
    <bean id="AdminPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.AdminAuditExtractors') ?: getObject('shibboleth.DefaultAdminAuditExtractors')}" />
        
    <bean id="WriteAuditLog" class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:activationCondition-ref="shibboleth.ProfileAuditingCondition"
        p:formattingMap-ref="shibboleth.AuditFormattingMap"
        p:dateTimeFormat="#{getObject('shibboleth.AuditDateTimeFormat')}"
        p:useDefaultTimeZone="#{getObject('shibboleth.AuditDefaultTimeZone') ?: false}"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier" />
    
    <bean id="MapEventToView"
        class="net.shibboleth.idp.profile.context.navigate.SpringEventToViewLookupFunction"
        p:defaultView-ref="shibboleth.DefaultErrorView"
        p:eventMap="#{getObject('shibboleth.EventViewMap')}" />

</beans>
