<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">
       
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.shared.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <bean id="shibboleth.X509ResourceCredentialConfig"
        class="net.shibboleth.idp.authn.impl.X509ResourceCredentialConfig" abstract="true" /> 
    <bean id="shibboleth.KeystoreResourceCredentialConfig"
        class="net.shibboleth.idp.authn.impl.KeystoreResourceCredentialConfig" abstract="true" /> 

    <!-- Legacy approach, needed to allow override via config. -->
    <bean id="shibboleth.authn.Password.addDefaultPrincipals" class="java.lang.Boolean" factory-method="valueOf"
        c:_0="%{idp.authn.Password.addDefaultPrincipals:true}" />
    <bean id="shibboleth.authn.Password.RemoveAfterValidation" class="java.lang.Boolean" factory-method="valueOf"
        c:_0="%{idp.authn.Password.removeAfterValidation:true}" />

    <!-- Formerly public beans in ldap-authn-config.xml, overrideable via import. -->
    <bean id="shibboleth.authn.LDAP.returnAttributes" parent="shibboleth.CommaDelimStringArray">
        <constructor-arg type="java.lang.String" value="%{idp.authn.LDAP.returnAttributes:1.1}" />
    </bean>
    <bean id="shibboleth.authn.LDAP.trustCertificates" parent="shibboleth.X509ResourceCredentialConfig"
        p:trustCertificates="%{idp.authn.LDAP.trustCertificates:undefined}" />
    <bean id="shibboleth.authn.LDAP.truststore" parent="shibboleth.KeystoreResourceCredentialConfig"
        p:truststore="%{idp.authn.LDAP.trustStore:undefined}" />
    <bean id="shibboleth.authn.LDAP.authenticator" parent="shibboleth.LDAPAuthenticationFactory" lazy-init="true" />

    <!-- Formerly public beans in jaas-authn-config.xml, overrideable via import. -->
    <bean id="shibboleth.authn.JAAS.LoginConfigNames" parent="shibboleth.CommaDelimStringArray"
        c:_0="#{'%{idp.authn.JAAS.loginConfigNames:ShibUserPassAuth}'.trim()}" />

    <import resource="conditional:%{idp.home}/conf/authn/password-authn-config.xml" />

    <bean id="ExtractUsernamePasswordFromBasicAuth"
        class="net.shibboleth.idp.authn.impl.ExtractUsernamePasswordFromBasicAuth" scope="prototype"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier" />
    
    <bean id="ExtractUsernamePasswordFromFormRequest"
        class="net.shibboleth.idp.authn.impl.ExtractUsernamePasswordFromFormRequest" scope="prototype"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:usernameFieldName="#{getObject('shibboleth.authn.Password.UsernameFieldName') ?: '%{idp.authn.Password.usernameFieldName:j_username}'.trim()}"
        p:passwordFieldName="#{getObject('shibboleth.authn.Password.PasswordFieldName') ?: '%{idp.authn.Password.passwordFieldName:j_password}'.trim()}"
        p:SSOBypassFieldName="#{getObject('shibboleth.authn.Password.SSOBypassFieldName') ?: '%{idp.authn.Password.ssoBypassFieldName:donotcache}'.trim()}" />
        
    <bean id="PopulateSubjectCanonicalizationContext"
        class="net.shibboleth.idp.authn.impl.PopulateSubjectCanonicalizationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.PostLoginSubjectCanonicalizationFlows" />
    
    <bean id="DefaultCleanupHook" class="net.shibboleth.idp.authn.impl.ValidateCredentials.UsernamePasswordCleanupHook" />
    
    <!-- New action bean that uses CredentialValidator chains. -->
    <bean id="ValidateCredentials"
        class="net.shibboleth.idp.authn.impl.ValidateCredentials" scope="prototype"
        p:requireAll="#{getObject('shibboleth.authn.Password.RequireAll') ?: %{idp.authn.Password.requireAll:false}}"
        p:validators="#{getObject('shibboleth.authn.Password.Validators') ?: getObject('ValidateUsernamePassword')}"
        p:addDefaultPrincipals-ref="shibboleth.authn.Password.addDefaultPrincipals"
        p:classifiedMessages="#{getObject('shibboleth.authn.Password.ClassifiedMessageMap')}"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.Password.resultCachingPredicate')}"
        p:cleanupHook="#{getObject('shibboleth.authn.Password.RemoveAfterValidation') == true ? getObject('DefaultCleanupHook') : null}"
        p:lockoutManager="#{getObject('shibboleth.authn.Password.AccountLockoutManager')}"
        p:populateAuditContextAction="#{%{idp.authn.Password.audit.enabled:%{idp.authn.audit.enabled:false}} ? getObject('shibboleth.authn.Password.PopulateAuditContext') : null}"
        p:writeAuditLogAction="#{%{idp.authn.Password.audit.enabled:%{idp.authn.audit.enabled:false}} ? getObject('WriteAuditLog') : null}" />
    
    <!-- New parent bean for defining validators. -->
    
    <bean id="shibboleth.CredentialValidator" abstract="true"
        p:savePasswordToCredentialSet="#{getObject('shibboleth.authn.Password.RetainAsPrivateCredential') ?: %{idp.authn.Password.retainAsPrivateCredential:false}}"
        p:lowercase="#{getObject('shibboleth.authn.Password.Lowercase') ?: %{idp.authn.Password.lowercase:false}}"
        p:uppercase="#{getObject('shibboleth.authn.Password.Uppercase') ?: %{idp.authn.Password.uppercase:false}}"
        p:trim="#{getObject('shibboleth.authn.Password.Trim') ?: %{idp.authn.Password.trim:true}}"
        p:transforms="#{getObject('shibboleth.authn.Password.Transforms')}"
        p:matchExpression="#{getObject('shibboleth.authn.Password.matchExpression') ?: '%{idp.authn.Password.matchExpression:}'}" />

    <!-- New validator(s) that didn't exist in prior versions. -->
    <bean id="shibboleth.HTPasswdCredentialValidator" parent="shibboleth.CredentialValidator" abstract="true"
        class="net.shibboleth.idp.authn.impl.HTPasswdCredentialValidator"
        p:id="htpasswd" />

    <!-- Alias the legacy names into "officially" supported parent bean names. -->

    <alias alias="shibboleth.HTPasswdValidator" name="shibboleth.HTPasswdCredentialValidator" />
    <alias alias="shibboleth.JAASValidator" name="ValidateUsernamePasswordAgainstJAAS" />
    <alias alias="shibboleth.KerberosValidator" name="ValidateUsernamePasswordAgainstKerberos" />
    <alias alias="shibboleth.LDAPValidator" name="ValidateUsernamePasswordAgainstLDAP" />

    <!-- Legacy validators defined under V3 action bean names. -->
    
    <bean id="ValidateUsernamePasswordAgainstJAAS" parent="shibboleth.CredentialValidator" lazy-init="true"
        class="net.shibboleth.idp.authn.impl.JAASCredentialValidator"
        p:id="jaas"
        p:loginConfigStrategy="#{getObject('shibboleth.authn.JAAS.LoginConfigStrategy')}"
        p:loginConfigNames-ref="shibboleth.authn.JAAS.LoginConfigNames"
        p:loginConfigurations="#{getObject('shibboleth.authn.JAAS.LoginConfigurations')}"
        p:loginConfigType="JavaLoginConfig"
        p:loginConfigResource="#{'%{idp.authn.JAAS.loginConfig:%{idp.home}/conf/authn/jaas.config}'.trim()}"
        p:loginConfigParameters="#{getObject('shibboleth.authn.JAAS.JAASConfigURI')}" />

    <bean id="shibboleth.authn.JAAS.LoginConfigStrategy.RelyingPartyMap" abstract="true"
        class="net.shibboleth.idp.authn.impl.RelyingPartyMapJAASLoginConfigStrategy" />

    <bean id="ValidateUsernamePasswordAgainstKerberos" parent="shibboleth.CredentialValidator" lazy-init="true"
        class="net.shibboleth.idp.authn.impl.KerberosCredentialValidator"
        p:id="krb5"
        p:refreshKrb5Config="#{getObject('shibboleth.authn.Krb5.RefreshConfig') ?: %{idp.authn.Krb5.refreshConfig:false}}"
        p:preserveTicket="#{getObject('shibboleth.authn.Krb5.PreserveTicket') ?: %{idp.authn.Krb5.preserveTicket:false}}"
        p:servicePrincipal="#{getObject('shibboleth.authn.Krb5.ServicePrincipal') ?: '%{idp.authn.Krb5.servicePrincipal:}'.trim()}"
        p:keytabPath="#{getObject('shibboleth.authn.Krb5.Keytab') ?: '%{idp.authn.Krb5.keytab:}'.trim()}" />

    <bean id="ValidateUsernamePasswordAgainstLDAP" parent="shibboleth.CredentialValidator" lazy-init="true"
        class="net.shibboleth.idp.authn.impl.LDAPCredentialValidator"
        p:id="ldap"
        p:authenticator-ref="shibboleth.authn.LDAP.authenticator"
        p:returnAttributes-ref="shibboleth.authn.LDAP.returnAttributes" />

    <!-- Parent beans for custom ldaptive types. -->
    
    <bean id="shibboleth.LDAPAuthenticationFactory" abstract="true"
        class="net.shibboleth.idp.authn.config.LDAPAuthenticationFactoryBean"
        p:authenticatorType="#{'%{idp.authn.LDAP.authenticator:anonSearchAuthenticator}'.trim()}"
        p:trustType="#{'%{idp.authn.LDAP.sslConfig:certificateTrust}'.trim()}"
        p:connectionStrategyType="#{'%{idp.authn.LDAP.connectionStrategy:ACTIVE_PASSIVE}'.trim()}"
        p:ldapUrl="%{idp.authn.LDAP.ldapURL:ldap://localhost:10389}"
        p:useStartTLS="%{idp.authn.LDAP.useStartTLS:true}"
        p:connectTimeout="%{idp.authn.LDAP.connectTimeout:PT3S}"
        p:responseTimeout="%{idp.authn.LDAP.responseTimeout:PT3S}"
        p:trustCertificatesCredentialConfig-ref="shibboleth.authn.LDAP.trustCertificates"
        p:truststoreCredentialConfig-ref="shibboleth.authn.LDAP.truststore"
        p:disablePooling="%{idp.authn.LDAP.disablePooling:false}"
        p:blockWaitTime="%{idp.pool.LDAP.blockWaitTime:PT3S}"
        p:minPoolSize="%{idp.pool.LDAP.minSize:3}"
        p:maxPoolSize="%{idp.pool.LDAP.maxSize:10}"
        p:validateOnCheckout="%{idp.pool.LDAP.validateOnCheckout:false}"
        p:validatePeriodically="%{idp.pool.LDAP.validatePeriodically:true}"
        p:validatePeriod="%{idp.pool.LDAP.validatePeriod:PT5M}"
        p:validateDn="#{'%{idp.pool.LDAP.validateDN:%{idp.authn.LDAP.validateDN:}}'.trim()}"
        p:validateFilter="#{'%{idp.pool.LDAP.validateFilter:(objectClass=*)}'.trim()}"
        p:bindPoolPassivatorType="#{'%{idp.authn.LDAP.bindPoolPassivator:none}'.trim()}"
        p:prunePeriod="%{idp.pool.LDAP.prunePeriod:PT5M}"
        p:idleTime="%{idp.pool.LDAP.idleTime:PT10M}"
        p:dnFormat="%{idp.authn.LDAP.dnFormat:undefined}"
        p:baseDn="#{'%{idp.authn.LDAP.baseDN:undefined}'.trim()}"
        p:userFilter="#{'%{idp.authn.LDAP.userFilter:undefined}'.trim()}"
        p:subtreeSearch="%{idp.authn.LDAP.subtreeSearch:false}"
        p:resolveEntryOnFailure="%{idp.authn.LDAP.resolveEntryOnFailure:false}"
        p:resolveEntryWithBindDn="%{idp.authn.LDAP.resolveEntryWithBindDN:false}"
        p:velocityEngine-ref="shibboleth.VelocityEngine"
        p:bindDn="#{'%{idp.authn.LDAP.bindDN:undefined}'.trim()}"
        p:bindDnCredential="%{idp.authn.LDAP.bindDNCredential:undefined}"
        p:usePasswordPolicy="%{idp.authn.LDAP.usePasswordPolicy:false}"
        p:usePasswordExpiration="%{idp.authn.LDAP.usePasswordExpiration:false}"
        p:activeDirectory="%{idp.authn.LDAP.activeDirectory:false}"
        p:freeIPA="%{idp.authn.LDAP.freeIPADirectory:false}"
        p:EDirectory="%{idp.authn.LDAP.eDirectory:false}"
        p:accountStateExpirationPeriod="%{idp.authn.LDAP.accountStateExpirationPeriod:#{null}}"
        p:accountStateWarningPeriod="%{idp.authn.LDAP.accountStateWarningPeriod:#{null}}"
        p:accountStateLoginFailures="%{idp.authn.LDAP.accountStateLoginFailures:0}" />

    <!-- Audit logging beans. -->

    <!-- Default audit format and extractors --> 
    <util:map id="shibboleth.authn.AuditFormattingMap">
        <entry key="#{'%{idp.authn.Password.audit.category:Shibboleth-Audit.Password}'.trim()}"
            value="#{'%{idp.authn.Password.audit.format:%a|%T|%SP|%s|%AF|%CV|%u|%tu|%AR|%UA}'.trim()}" />
    </util:map>

    <bean id="shibboleth.authn.Password.DefaultAuditExtractors" parent="shibboleth.authn.DefaultAuditExtractors" lazy-init="true"
            class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
             <map merge="true">
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.profile.IdPAuditFields.USERNAME"/>
                    </key>
                    <bean class="net.shibboleth.idp.authn.audit.impl.AttemptedUsernameAuditExtractor" />
                </entry>
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.authn.AuthnAuditFields.TRANSFORMED_USERNAME"/>
                    </key>
                    <bean class="net.shibboleth.idp.authn.audit.impl.TransformedUsernameAuditExtractor" />
                </entry>
             </map>
        </property>
    </bean>
    
    <bean id="shibboleth.authn.Password.PopulateAuditContext" parent="shibboleth.authn.AbstractPopulateAuditContext" lazy-init="true"
        p:fieldExtractors="#{getObject('shibboleth.authn.Password.AuditExtractors') ?: getObject('shibboleth.authn.Password.DefaultAuditExtractors')}"
        p:clearAuditContext="true" />

</beans>
