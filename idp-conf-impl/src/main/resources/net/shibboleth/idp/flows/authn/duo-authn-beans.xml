<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

    default-init-method="initialize" default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer" p:placeholderPrefix="%{"
        p:placeholderSuffix="}" />

    <bean class="net.shibboleth.shared.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <!-- Default static integrations. -->
    
    <bean id="shibboleth.authn.Duo.DuoIntegration" class="net.shibboleth.idp.authn.duo.BasicDuoIntegration"
        p:APIHost="%{idp.duo.apiHost:none}"
        p:applicationKey="%{idp.duo.applicationKey:none}"
        p:integrationKey="%{idp.duo.integrationKey:none}"
        p:secretKey="%{idp.duo.secretKey:none}" />
    <bean id="shibboleth.authn.Duo.DuoIntegrationStrategy" parent="shibboleth.Functions.Constant"
        c:target-ref="shibboleth.authn.Duo.DuoIntegration" />

    <bean id="shibboleth.authn.Duo.NonBrowser.DuoIntegration" class="net.shibboleth.idp.authn.duo.BasicDuoIntegration"
        p:APIHost="%{idp.duo.nonbrowser.apiHost:%{idp.duo.apiHost:none}}"
        p:integrationKey="%{idp.duo.nonbrowser.integrationKey:none}"
        p:secretKey="%{idp.duo.nonbrowser.secretKey:none}" />
    <bean id="shibboleth.authn.Duo.NonBrowser.DuoIntegrationStrategy" parent="shibboleth.Functions.Constant"
        c:target-ref="shibboleth.authn.Duo.NonBrowser.DuoIntegration" />


    <!-- Default username comes from previous c14n or session. -->        
    <bean id="shibboleth.authn.Duo.UsernameLookupStrategy"
        class="net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy" />

    <!-- Default message map. -->
    <util:map id="shibboleth.authn.Duo.ClassifiedMessageMap">
        <entry key="AccountLocked">
            <list>
                <value>locked_out</value>
                <value>Your two-factor account is disabled.</value>
            </list>
        </entry>
        <entry key="NoCredentials">
            <list>
                <value>Invalid request parameters (no capable device)</value>
            </list>
        </entry>
    </util:map>

    <!-- Can override one or more of the beans above. -->
    <import resource="conditional:%{idp.home}/conf/authn/duo-authn-config.xml" />

    <alias name="shibboleth.authn.Duo.UsernameLookupStrategy" alias="CanonicalUsernameStrategy" />

    <bean id="ValidateDuoWebResponse" scope="prototype"
        class="net.shibboleth.idp.authn.duo.impl.ValidateDuoWebResponse"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:usernameLookupStrategy-ref="shibboleth.authn.Duo.UsernameLookupStrategy"
        p:duoIntegrationLookupStrategy-ref="shibboleth.authn.Duo.DuoIntegrationStrategy"
        p:addDefaultPrincipals="#{getObject('shibboleth.authn.Duo.addDefaultPrincipals') ?: %{idp.authn.Duo.addDefaultPrincipals:true}}"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.Duo.resultCachingPredicate')}"
        p:populateAuditContextAction="#{%{idp.authn.Duo.audit.enabled:%{idp.authn.audit.enabled:false}} ? getObject('shibboleth.authn.Duo.PopulateAuditContext') : null}"
        p:writeAuditLogAction="#{%{idp.authn.Duo.audit.enabled:%{idp.authn.audit.enabled:false}} ? getObject('WriteAuditLog') : null}" />

    <bean id="ExtractDuoAuthenticationFromHeaders" scope="prototype"
        class="net.shibboleth.idp.authn.duo.impl.ExtractDuoAuthenticationFromHeaders"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:autoAuthenticationSupported="%{idp.duo.nonbrowser.auto:true}"
        p:clientAdddressTrusted="%{idp.duo.nonbrowser.clientAddressTrusted:true}"
        p:factorHeader="%{idp.duo.nonbrowser.header.factor:X-Shibboleth-Duo-Factor}"
        p:deviceHeader="%{idp.duo.nonbrowser.header.device:X-Shibboleth-Duo-Device}"
        p:passcodeHeader="%{idp.duo.nonbrowser.header.passcode:X-Shibboleth-Duo-Passcode}"
        p:pushInfoLookupStrategy="#{getObject('shibboleth.authn.Duo.PushInfoLookupStrategy')}" />

    <bean id="DuoPreauthAuthenticator" lazy-init="true"
        class="net.shibboleth.idp.authn.duo.impl.DuoPreauthAuthenticator"
        p:objectMapper-ref="shibboleth.JSONObjectMapper"
        p:httpClient="#{getObject('shibboleth.authn.Duo.NonBrowser.HttpClient') ?: getObject('shibboleth.InternalHttpClient')}"
        p:httpClientSecurityParameters="#{getObject('shibboleth.authn.Duo.NonBrowser.HttpClientSecurityParameters')}" />

    <bean id="DuoAuthAuthenticator" lazy-init="true"
        class="net.shibboleth.idp.authn.duo.impl.DuoAuthAuthenticator"
        p:objectMapper-ref="shibboleth.JSONObjectMapper"
        p:httpClient="#{getObject('shibboleth.authn.Duo.NonBrowser.HttpClient') ?: getObject('shibboleth.InternalHttpClient')}"
        p:httpClientSecurityParameters="#{getObject('shibboleth.authn.Duo.NonBrowser.HttpClientSecurityParameters')}" />

    <bean id="ValidateDuoAuthAPI" scope="prototype"
        class="net.shibboleth.idp.authn.duo.impl.ValidateDuoAuthAPI"
        p:usernameLookupStrategy-ref="shibboleth.authn.Duo.UsernameLookupStrategy"
        p:duoIntegrationLookupStrategy-ref="shibboleth.authn.Duo.NonBrowser.DuoIntegrationStrategy"
        p:addDefaultPrincipals="#{getObject('shibboleth.authn.Duo.addDefaultPrincipals') ?: %{idp.authn.Duo.addDefaultPrincipals:true}}"
        p:preauthAuthenticator-ref="DuoPreauthAuthenticator"
        p:authAuthenticator-ref="DuoAuthAuthenticator"
        p:classifiedMessages="#{getObject('shibboleth.authn.Duo.ClassifiedMessageMap')}"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.Duo.resultCachingPredicate')}"
        p:populateAuditContextAction="#{%{idp.authn.Duo.audit.enabled:%{idp.authn.audit.enabled:false}} ? getObject('shibboleth.authn.Duo.PopulateAuditContext') : null}"
        p:writeAuditLogAction="#{%{idp.authn.Duo.audit.enabled:%{idp.authn.audit.enabled:false}} ? getObject('WriteAuthnAuditLog') : null}" />

    <!-- Audit logging beans. -->

    <util:map id="shibboleth.authn.AuditFormattingMap">
        <entry key="#{'%{idp.authn.Duo.audit.category:Shibboleth-Audit.Duo}'.trim()}"
            value="#{'%{idp.authn.Duo.audit.format:%a|%T|%SP|%I|%s|%AF|%u|%AR|%DuoCID|%DuoF|%DuoDID|%UA}'.trim()}" />
    </util:map>

    <bean id="shibboleth.authn.Duo.DefaultAuditExtractors" parent="shibboleth.authn.DefaultAuditExtractors" lazy-init="true"
            class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
             <map merge="true" />
        </property>
    </bean>
    
    <bean id="shibboleth.authn.Duo.PopulateAuditContext" parent="shibboleth.authn.AbstractPopulateAuditContext" lazy-init="true"
        p:fieldExtractors="#{getObject('shibboleth.authn.Duo.AuditExtractors') ?: getObject('shibboleth.authn.Duo.DefaultAuditExtractors')}"
        p:clearAuditContext="true" />

</beans>
