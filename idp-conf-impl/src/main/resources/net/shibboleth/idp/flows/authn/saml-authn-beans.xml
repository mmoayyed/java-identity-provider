<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.shared.spring.config.IdentifiableBeanPostProcessor" />

    <bean id="PropertyDrivenDiscovery" parent="shibboleth.Functions.Constant"
        c:target="#{'%{idp.authn.SAML.proxyEntityID:}'.trim()}" />

    <bean id="shibboleth.authn.SAML.externalAuthnPathStrategy" parent="shibboleth.Functions.Constant"
        c:target="#{getObject('shibboleth.authn.SAML.externalAuthnPath') ?: 'servletRelative:%{idp.authn.SAML.externalAuthnPath:/Authn/SAML2/POST/SSO}'.trim()}" />

    <import resource="conditional:%{idp.home}/conf/authn/saml-authn-config.xml" />
    
    <!-- Parent beans for indirecting into nested PRC. -->
    
    <bean id="NestedWebFlowMessageHandlerAdaptor" abstract="true"
        class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext" />

    <bean id="NestedWebFlowProfileActionAdaptor" abstract="true"
        class="net.shibboleth.idp.profile.impl.WebFlowProfileActionAdaptor" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext" />
        
    <bean id="ParentAuthenticiationContextLookup" class="org.opensaml.messaging.context.navigate.ParentContextLookup"
        c:type="net.shibboleth.idp.authn.context.AuthenticationContext" />
    

    <!-- Action beans. -->

    <!-- Explicitly wrapped by a non-nested action adaptor. -->
    <bean id="InitializeProxyProfileRequestContext"
        class="net.shibboleth.idp.authn.proxy.impl.InitializeProxyProfileRequestContext"
        p:profileId="#{T(net.shibboleth.idp.saml.saml2.profile.config.BrowserSSOProfileConfiguration).PROFILE_ID}"
        p:loggingId="%{idp.service.logging.saml2sso:SSO}"
        p:browserProfile="true" />

    <bean id="FlowStartPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.FlowStartAuditExtractors') ?: getObject('shibboleth.DefaultFlowStartAuditExtractors')}" />

    <bean id="PrepareInboundMessageContext"
            class="net.shibboleth.idp.saml.session.impl.PrepareInboundMessageContext" scope="prototype"
            p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext">
        <property name="relyingPartyLookupStrategy">
           <bean parent="shibboleth.Functions.Compose" c:f-ref="ParentAuthenticiationContextLookup">
               <constructor-arg name="g">
                   <bean parent="shibboleth.Functions.Expression" c:expression="#input.getAuthenticatingAuthority()" />
               </constructor-arg>
           </bean>
        </property>
    </bean>

    <bean id="SAMLProtocolAndRole" parent="NestedWebFlowMessageHandlerAdaptor" c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLProtocolAndRoleHandler" scope="prototype"
                p:protocol-ref="shibboleth.MetadataLookup.Protocol"
                p:role-ref="shibboleth.MetadataLookup.Role" />
        </constructor-arg>
    </bean>
    
    <util:constant id="shibboleth.MetadataLookup.Protocol"
        static-field="org.opensaml.saml.common.xml.SAMLConstants.SAML20P_NS" />

    <util:constant id="shibboleth.MetadataLookup.Role"
        static-field="org.opensaml.saml.saml2.metadata.IDPSSODescriptor.DEFAULT_ELEMENT_NAME" />
    
    <bean id="SAMLMetadataLookup" parent="NestedWebFlowMessageHandlerAdaptor" c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLMetadataLookupHandler" scope="prototype">
                <property name="roleDescriptorResolver">
                    <bean class="org.opensaml.saml.metadata.resolver.impl.PredicateRoleDescriptorResolver"
                        c:mdResolver-ref="shibboleth.MetadataResolver" />
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="InitializeRelyingPartyContextFromSAMLPeer"
        class="net.shibboleth.idp.saml.profile.impl.InitializeRelyingPartyContextFromSAMLPeer" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext" />

    <bean id="SelectRelyingPartyConfiguration"
        class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyResolverService" />

    <bean id="PostLookupPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:fieldExtractors="#{getObject('shibboleth.PostLookupAuditExtractors') ?: getObject('shibboleth.DefaultPostLookupAuditExtractors')}" />

    <bean id="SelectProfileConfiguration"
        class="net.shibboleth.idp.profile.impl.SelectProfileConfiguration" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext" />

    <bean id="InitializeOutboundMessageContext"
        class="net.shibboleth.idp.saml.profile.impl.InitializeOutboundMessageContext" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext" />

    <bean id="InitializeMessageChannelSecurityContext" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.profile.action.impl.StaticMessageChannelSecurity"
                p:confidentialityActive="false" p:integrityActive="false" />
        </constructor-arg>
    </bean>

    <bean id="PopulateInboundMessageContextWithSAMLSelf" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="net.shibboleth.idp.saml.profile.impl.PopulateInboundMessageContextWithSAMLSelf" scope="prototype" />
        </constructor-arg>
    </bean>

    <util:constant id="shibboleth.EndpointType"
        static-field="org.opensaml.saml.saml2.metadata.SingleSignOnService.DEFAULT_ELEMENT_NAME" />

    <bean id="shibboleth.OutgoingBindingsLookupStrategy" parent="shibboleth.Functions.Constant"
        c:_0-ref="shibboleth.OutgoingSAML2SSORequestBindings" />

    <bean id="PopulateBindingAndEndpointContexts"
        class="net.shibboleth.idp.saml.profile.impl.PopulateBindingAndEndpointContexts" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:endpointResolver-ref="shibboleth.EndpointResolver"
        p:endpointType-ref="shibboleth.EndpointType"
        p:bindingDescriptorsLookupStrategy-ref="shibboleth.OutgoingBindingsLookupStrategy"
        p:artifactImpliesSecureChannel="%{idp.artifact.secureChannel:true}" />

    <bean id="PopulateRequestSignatureSigningParameters" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.saml.common.profile.impl.PopulateSignatureSigningParameters"
                    p:configurationLookupStrategy-ref="shibboleth.SignatureSigningConfigurationLookup"
                    p:signatureSigningParametersResolver-ref="shibboleth.SignatureSigningParametersResolver"
                    p:noResultIsError="false">
                <property name="activationCondition">
                    <bean class="net.shibboleth.saml.profile.config.logic.SignRequestsPredicate"
                        p:honorMetadata="%{idp.saml.honorWantAuthnRequestsSigned:true}" />
                </property>
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="AddAuthnRequest"
            class="net.shibboleth.idp.saml.saml2.profile.impl.AddAuthnRequest" scope="prototype"
            p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
            p:overwriteExisting="true"
            p:issuerLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple">
        <property name="identifierGeneratorLookupStrategy">
            <bean class="net.shibboleth.profile.config.navigate.IdentifierGenerationStrategyLookupFunction"
                p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyResolverService"
                p:defaultIdentifierGenerationStrategy-ref="shibboleth.DefaultIdentifierGenerationStrategy" />
        </property>
    </bean>

    <bean id="PostRequestPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:fieldExtractors="#{getObject('shibboleth.PostRequestAuditExtractors') ?: getObject('shibboleth.DefaultPostRequestAuditExtractors')}" />

    <bean id="WriteAuditLog" class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:formattingMap-ref="shibboleth.AuditFormattingMap"
        p:dateTimeFormat="#{getObject('shibboleth.AuditDateTimeFormat')}"
        p:useDefaultTimeZone="#{getObject('shibboleth.AuditDefaultTimeZone') ?: false}"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier" />

    <!-- These beans are stashed into the context tree to be picked up and run outside SWF by the SAML controller. -->
    
    <bean id="PreEncodeMessageHandler" class="org.opensaml.messaging.handler.impl.BasicMessageHandlerChain" scope="prototype">
        <property name="handlers">
            <list>
                <bean class="org.opensaml.saml.common.binding.impl.SAMLOutboundDestinationHandler" scope="prototype"/>
                <bean class="org.opensaml.saml.common.binding.security.impl.EndpointURLSchemeSecurityHandler" scope="prototype"/>
                <bean class="org.opensaml.messaging.handler.impl.FunctionMessageHandler" scope="prototype"
                    p:function="#{getObject('%{idp.authn.SAML.outboundMessageHandlerFunction:}'.trim())}" />
                <bean class="org.opensaml.saml.common.binding.security.impl.SAMLOutboundProtocolMessageSigningHandler" scope="prototype"
                        p:signErrorResponses="%{idp.errors.signed:true}">
                    <property name="activationCondition">
                        <bean parent="shibboleth.Conditions.NOT">
                            <constructor-arg>
                                <bean class="org.opensaml.saml.common.messaging.logic.SignatureCapableBindingPredicate" />
                            </constructor-arg>
                        </bean>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="messageEncoderFactory" class="net.shibboleth.idp.saml.profile.impl.SpringAwareMessageEncoderFactory" />

    <bean id="EncodeMessage" class="org.opensaml.profile.action.impl.EncodeMessage" scope="prototype"
        p:messageEncoderFactory-ref="messageEncoderFactory"
        p:messageHandler="#{getObject('shibboleth.BindingSpecificMessageHandler')}" />

    <!-- This is mostly a placeholder in case we get forced to support other bindings at some point. -->

    <bean id="messageDecoderFactory" class="net.shibboleth.idp.saml.profile.impl.SpringAwareMessageDecoderFactory">
        <property name="beanMappings">
            <map>
                <entry key="POST" value="SAMLAuthnPostDecoder" />
            </map>
        </property>
    </bean>

    <bean id="SAMLAuthnPostDecoder"
        class="org.opensaml.saml.saml2.binding.decoding.impl.HTTPPostDecoder" scope="prototype" init-method=""
        p:parserPool-ref="shibboleth.ParserPool"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:bindingDescriptor-ref="shibboleth.Binding.SAML2POST" />

    <bean id="ContinueSAMLAuthentication"
        class="net.shibboleth.idp.saml.saml2.profile.impl.ContinueSAMLAuthentication" scope="prototype"
        p:authenticationContextLookupStrategy-ref="ParentAuthenticiationContextLookup"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext" />

    <bean id="PopulateSignatureValidationParameters" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
		    <bean class="org.opensaml.profile.action.impl.PopulateSignatureValidationParameters"
		        p:configurationLookupStrategy-ref="shibboleth.SignatureValidationConfigurationLookup"
		        p:signatureValidationParametersResolver-ref="shibboleth.SignatureValidationParametersResolver" />
        </constructor-arg>
    </bean>

    <bean id="PopulateClientTLSValidationParameters" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.profile.action.impl.PopulateClientTLSValidationParameters"
		        p:configurationLookupStrategy-ref="shibboleth.ClientTLSValidationConfigurationLookup"
		        p:clientTLSValidationParametersResolver-ref="shibboleth.ClientTLSValidationParametersResolver" />
        </constructor-arg>
    </bean>

    <bean id="OutboundSAMLMetadataContextLookup" parent="shibboleth.Functions.Compose">
        <constructor-arg name="g">
            <bean class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                  c:type="#{ T(org.opensaml.saml.common.messaging.context.SAMLMetadataContext) }" />
        </constructor-arg>
        <constructor-arg name="f">
            <bean parent="shibboleth.Functions.Compose">
                <constructor-arg name="g">
                    <bean class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                          c:type="#{ T(org.opensaml.saml.common.messaging.context.SAMLPeerEntityContext) }" />
                </constructor-arg>
                <constructor-arg name="f">
                    <bean class="org.opensaml.messaging.context.navigate.MessageContextLookup" c:direction="OUTBOUND" />
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="OutboundEntityIDLookup" parent="shibboleth.Functions.Compose">
        <constructor-arg name="g">
            <bean class="org.opensaml.saml.common.messaging.context.navigate.SAMLEntityIDFunction" />
        </constructor-arg>
        <constructor-arg name="f">
            <bean parent="shibboleth.Functions.Compose">
                <constructor-arg name="g">
                    <bean class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                          c:type="#{ T(org.opensaml.saml.common.messaging.context.SAMLPeerEntityContext) }" />
                </constructor-arg>
                <constructor-arg name="f">
                    <bean class="org.opensaml.messaging.context.navigate.MessageContextLookup" c:direction="OUTBOUND" />
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="InboundEntityIDLookup" parent="shibboleth.Functions.Compose">
        <constructor-arg name="g">
            <bean class="org.opensaml.saml.common.messaging.context.navigate.SAMLEntityIDFunction" />
        </constructor-arg>
        <constructor-arg name="f">
            <bean parent="shibboleth.Functions.Compose">
                <constructor-arg name="g">
                    <bean class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                          c:type="#{ T(org.opensaml.saml.common.messaging.context.SAMLPeerEntityContext) }" />
                </constructor-arg>
                <constructor-arg name="f">
                    <bean class="org.opensaml.messaging.context.navigate.MessageContextLookup" c:direction="INBOUND" />
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="HandleResponse" parent="NestedWebFlowMessageHandlerAdaptor" scope="prototype" c:executionDirection="INBOUND">
        <constructor-arg>
            <bean class="org.opensaml.messaging.handler.impl.BasicMessageHandlerChain">
                <property name="handlers">
                    <list>
                        <bean class="org.opensaml.saml.common.binding.impl.CheckMessageVersionHandler" scope="prototype"
                            p:ignoreMissingOrUnrecognized="true" />
                        <bean class="org.opensaml.saml.common.binding.security.impl.InResponseToSecurityHandler" scope="prototype" />
                        <bean class="org.opensaml.saml.common.binding.impl.SAMLProtocolAndRoleHandler" scope="prototype"
                            p:protocol-ref="shibboleth.MetadataLookup.Protocol"
                            p:role-ref="shibboleth.MetadataLookup.Role" />
                        <bean class="org.opensaml.saml.common.binding.impl.SAMLMetadataLookupHandler" scope="prototype"
                              p:roleDescriptorResolver-ref="shibboleth.RoleDescriptorResolver"
                              p:copyContextStrategy-ref="OutboundSAMLMetadataContextLookup" />
                        <bean class="org.opensaml.saml.common.binding.security.impl.ReceivedEndpointSecurityHandler" scope="prototype"
                            p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier" />
                        <bean class="org.opensaml.saml.common.binding.security.impl.MessageReplaySecurityHandler" scope="prototype"
                            p:replayCache-ref="shibboleth.ReplayCache"
                            p:expires="%{idp.policy.messageLifetime:PT3M}" />
                        <bean class="org.opensaml.saml.common.binding.security.impl.MessageLifetimeSecurityHandler" scope="prototype"
                            p:messageLifetime="%{idp.policy.messageLifetime:PT3M}"
                            p:clockSkew="%{idp.policy.clockSkew:PT3M}" />
                        <bean class="org.opensaml.saml.common.binding.security.impl.SAMLProtocolMessageXMLSignatureSecurityHandler" scope="prototype" />
                        <bean class="org.opensaml.saml.saml2.binding.security.impl.SAML2HTTPPostSimpleSignSecurityHandler" scope="prototype"
                            p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
                            p:parser-ref="shibboleth.ParserPool"
                            p:keyInfoResolver-ref="shibboleth.KeyInfoCredentialResolver" />
                        <bean class="org.opensaml.messaging.handler.impl.CheckMandatoryIssuer" scope="prototype"
                            p:issuerLookupStrategy-ref="InboundEntityIDLookup" />
                        <bean class="org.opensaml.messaging.handler.impl.CheckExpectedIssuer" scope="prototype"
                            p:issuerLookupStrategy-ref="InboundEntityIDLookup"
                            p:expectedIssuerLookupStrategy-ref="OutboundEntityIDLookup" />
                        <bean class="org.opensaml.messaging.handler.impl.FunctionMessageHandler" scope="prototype"
                            p:function="#{getObject('%{idp.authn.SAML.inboundMessageHandlerFunction:}'.trim())}" />
                    </list>
                </property>
		     </bean>
        </constructor-arg>
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.INVALID_MESSAGE" />
        </property>
    </bean>

    <bean id="PopulateDecryptionParameters" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
		    <bean class="org.opensaml.profile.action.impl.PopulateDecryptionParameters"
		        p:configurationLookupStrategy-ref="shibboleth.DecryptionConfigurationLookup"
		        p:decryptionParametersResolver-ref="shibboleth.DecryptionParametersResolver" />
        </constructor-arg>
    </bean>
    
    <bean id="DecryptAssertions" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.saml.saml2.profile.impl.DecryptAssertions" />
        </constructor-arg>
    </bean>

    <bean id="AssertionValidator" class="org.opensaml.saml.saml2.assertion.SAML20AssertionValidator">
        <!-- Condition validators. -->
        <constructor-arg index="0">
            <util:list>
                <bean class="org.opensaml.saml.saml2.assertion.impl.AudienceRestrictionConditionValidator" />
                <bean class="org.opensaml.saml.saml2.assertion.impl.DelegationRestrictionConditionValidator" />
                <bean class="org.opensaml.saml.saml2.assertion.impl.OneTimeUseConditionValidator">
                    <constructor-arg ref="shibboleth.ReplayCache" />
                    <constructor-arg value="#{null}" />
                </bean>
                <bean class="org.opensaml.saml.saml2.assertion.impl.ProxyRestrictionConditionValidator" />
            </util:list>
        </constructor-arg>
        <!-- SubjectConfirmation validators. -->
        <constructor-arg index="1">
            <util:list>
                <bean class="org.opensaml.saml.saml2.assertion.impl.BearerSubjectConfirmationValidator" />
                <bean class="org.opensaml.saml.saml2.assertion.impl.HolderOfKeySubjectConfirmationValidator" />
            </util:list>
        </constructor-arg>
        <!-- Statement validators. -->
        <constructor-arg index="2">
            <util:list>
                <bean class="org.opensaml.saml.saml2.assertion.impl.AuthnStatementValidator" />
            </util:list>
        </constructor-arg>
        <constructor-arg index="3" value="#{getObject('%{idp.authn.SAML.assertionValidator:}'.trim())}" />
        <!-- This is null b/c in this case we use a dynamically-resolved engine in the ValidationContext -->
        <constructor-arg index="4" value="#{null}" />
        <constructor-arg index="5">
            <bean class="org.opensaml.saml.security.impl.SAMLSignatureProfileValidator" />
        </constructor-arg>
    </bean>

    <bean id="AssertionValidationContextBuilder" class="org.opensaml.saml.saml2.profile.impl.DefaultAssertionValidationContextBuilder">
        <property name="clockSkew" value="%{idp.policy.clockSkew:PT3M}" />
        <property name="lifetime" value="%{idp.policy.assertionLifetime:PT3M}" />
        <property name="checkAddress">
            <bean class="net.shibboleth.saml.saml2.profile.config.logic.CheckAddressPredicate" />
        </property>
        <property name="maximumTimeSinceAuthn">
            <bean class="net.shibboleth.saml.saml2.profile.config.navigate.MaximumTimeSinceAuthnLookupFunction" />
        </property>
        <property name="additionalAudiences">
            <bean class="net.shibboleth.saml.profile.config.navigate.AssertionAudiencesLookupFunction" />
        </property>
        <property name="signatureRequired">
            <bean parent="shibboleth.Conditions.NOT">
                <constructor-arg>
                    <bean class="org.opensaml.saml.common.profile.logic.InboundMessageSignedPredicate" p:presenceSatisfies="true" />
                </constructor-arg>
            </bean>
        </property>
        <property name="requiredConditions">
            <set>
                <util:constant static-field="org.opensaml.saml.saml2.core.AudienceRestriction.DEFAULT_ELEMENT_NAME" />
            </set>
        </property>
        <property name="inResponseToRequired" value="true" />
        <property name="recipientRequired" value="true" />
        <property name="notOnOrAfterRequired" value="true" />
    </bean>

    <bean id="ValidateAssertions" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.saml.saml2.profile.impl.ValidateAssertions" scope="prototype"
                  p:invalidFatal="false"
                  p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
                  p:validationContextBuilder-ref="AssertionValidationContextBuilder"
                  p:assertionValidator-ref="AssertionValidator" />
        </constructor-arg>
    </bean>

    <bean id="ProcessAssertionsForAuthentication" class="net.shibboleth.idp.saml.saml2.profile.impl.ProcessAssertionsForAuthentication" scope="prototype" />

    <bean id="DecryptNameIDs" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.saml.saml2.profile.impl.DecryptNameIDs" />
        </constructor-arg>
    </bean>

    <bean id="DecryptAttributes" parent="NestedWebFlowProfileActionAdaptor" scope="prototype">
        <constructor-arg>
            <bean class="org.opensaml.saml.saml2.profile.impl.DecryptAttributes" />
        </constructor-arg>
    </bean>

    <bean id="PostAssertionPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:fieldExtractors="#{getObject('shibboleth.PostInboundAssertionAuditExtractors') ?: getObject('shibboleth.DefaultPostInboundAssertionAuditExtractors')}" />

    <bean id="PostResponsePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:fieldExtractors="#{getObject('shibboleth.PostInboundResponseAuditExtractors') ?: getObject('shibboleth.DefaultPostInboundResponseAuditExtractors')}" />

    <bean id="ValidateSAMLAuthentication"
        class="net.shibboleth.idp.saml.saml2.profile.impl.ValidateSAMLAuthentication" scope="prototype"
        p:authenticationContextLookupStrategy-ref="ParentAuthenticiationContextLookup"
        p:profileContextLookupStrategy-ref="shibboleth.ChildLookup.ProxyProfileRequestContext"
        p:responderLookupStrategy-ref="shibboleth.RelyingPartyIdLookup.Simple"
        p:requesterLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple"
        p:transcoderRegistry-ref="shibboleth.AttributeRegistryService"
        p:attributeFilter-ref="shibboleth.AttributeFilterService"
        p:metadataResolver-ref="shibboleth.MetadataResolver"
        p:addDefaultPrincipals="#{getObject('shibboleth.authn.SAML.addDefaultPrincipals') ?: %{idp.authn.SAML.addDefaultPrincipals:false}}"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.SAML.resultCachingPredicate')}"        
        p:attributeExtractionStrategy="#{getObject('shibboleth.authn.SAML.attributeExtractionStrategy')}"
        p:loggedAttributeId="%{idp.authn.SAML.loggedAttributeId:}" />

    <bean id="PopulateSubjectCanonicalizationContext"
        class="net.shibboleth.idp.authn.impl.PopulateSubjectCanonicalizationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.PostLoginSubjectCanonicalizationFlows" />

</beans>
