<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">

    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="FlowStartPopulateAuditContext" />
        <evaluate expression="PopulateMetricContext" />
        <evaluate expression="PopulateUserAgentContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageLoadContext" />
    </action-state>

    <!-- Load client storage if needed. -->
    
    <action-state id="PopulateClientStorageLoadContext">
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="DoLogout" />
    </action-state>
    
    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="DoLogout"/>
    </subflow-state>

    <action-state id="DoLogout">
        <evaluate expression="ProcessLogout" />
        <evaluate expression="LogoutPopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckPromptCondition1">
            <set name="flowScope.transitionAfterDestroy" value="'ContinueLogout'" />
            <set name="flowScope.promptForIdP" value="UserPromptCondition.test(opensamlProfileRequestContext)" />
        </transition>
    </action-state>

    <decision-state id="CheckPromptCondition1">
        <if test="promptForIdP"
            then="ContinueLogout" else="DestroySessions" />
    </decision-state>

    <action-state id="DestroySessions">
        <evaluate expression="DestroySessions" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageSaveContext" />
    </action-state>

    <!-- We may need to save client storage. -->
    
    <action-state id="PopulateClientStorageSaveContext">
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="#{transitionAfterDestroy}" />
    </action-state>
    
    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="#{transitionAfterDestroy}"/>
    </subflow-state>

    <!-- Continue the logout process. -->

    <action-state id="ContinueLogout">
        <evaluate expression="PopulateMultiRPContextFromLogoutContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="NextRelyingPartyContext" />
    </action-state>
    
    <decision-state id="NextRelyingPartyContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext), true).getRelyingPartyContextIterator().hasNext()"
            then="SetRPUIInformation" else="LogoutView" />
    </decision-state>
    
    <action-state id="SetRPUIInformation">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext)).getRelyingPartyContextIterator().next()" />
        </on-entry>
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="NextRelyingPartyContext" />
    </action-state>

    <view-state id="LogoutView" view="logout">
    	<attribute name="csrf_excluded" value="true" type="boolean"/>
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="viewScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="viewScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.shared.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom" />
        </on-render>
        <transition on="proceed" to="LogoutCompleteView" />
        <transition on="local" to="DestroySessions">
            <set name="flowScope.transitionAfterDestroy" value="'LogoutCompleteView'" />
        </transition>
        <transition on="propagate" to="CheckPromptCondition2">
            <set name="flowScope.transitionAfterDestroy" value="'LogoutPropagateView'" />
        </transition>
        <transition on="end" to="LogoutCompleteView" />
    </view-state>

    <decision-state id="CheckPromptCondition2">
        <if test="promptForIdP"
            then="DestroySessions" else="#{transitionAfterDestroy}" />
    </decision-state>

    <!-- Terminus -->

    <end-state id="LogoutPropagateView" view="logout-propagate">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="SaveLogoutContext" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="requestScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="requestScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.shared.codec.HTMLEncoder)" result="requestScope.htmlEncoder" />
            <evaluate expression="T(java.net.URLEncoder)" result="requestScope.urlEncoder" />
            <evaluate expression="T(org.cryptacular.util.CodecUtil)" result="requestScope.codecUtil" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LogoutPropagationFlowSelector')" result="requestScope.flowSelector" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>

    <end-state id="LogoutCompleteView" view="logout-complete">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="requestScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="requestScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.shared.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="LogRuntimeException.log('net.shibboleth.idp.profile', flowExecutionException)" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        
        <transition to="HandleErrorWithView" />
    </action-state>

    <!-- Unsuccessful terminal states. -->
    
    <decision-state id="HandleErrorWithView">
        <on-entry>
            <evaluate expression="LogEvent" />
        </on-entry>
        <if test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id) and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').get(currentEvent.id)"
            then="AuditedErrorView" else="ErrorView" />
    </decision-state>

    <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.shared.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <end-state id="ErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.shared.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <!-- Default is to turn non-proceed events into an error. -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleErrorWithView" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="logout-beans.xml" />

</flow>
