<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    abstract="true" parent="saml.abstract">

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <action-state id="InitializeProfileRequestContext">
        <on-entry>
            <set name="flowScope.inboundSecuritySubflow" value="'intercept/security-policy/shibboleth-sso'" />
            <evaluate expression="T(net.shibboleth.shared.primitive.DeprecationSupport).atRiskOnce(T(net.shibboleth.shared.primitive.DeprecationSupport.ObjectType).WEBFLOW, 'SAML 1.1 SSO', null)" />
        </on-entry>
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="FlowStartPopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <!-- This picks up from the parent flow with the transition or error step. -->

    <action-state id="DoProfileWork">
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="AuthenticationSetup" />
    </action-state>
    
    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="AuthenticationSetup"/>
    </subflow-state>
    
    <action-state id="AuthenticationSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ResolveAttributes" />
        <transition on="RestartAuthentication" to="AuthenticationSetup" />
    </subflow-state>
    
    <decision-state id="ResolveAttributes">
        <if test="ResolveAttributesPredicate.test(opensamlProfileRequestContext)"
            then="AttributeResolution"
            else="PopulatePostAuthnInterceptContext" />
    </decision-state>
    
    <action-state id="AttributeResolution">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulatePostAuthnInterceptContext" />
    </action-state>

    <action-state id="PopulatePostAuthnInterceptContext">
        <evaluate expression="PopulatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
    </action-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="BuildResponse" else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="BuildResponse" />
        <transition on="RestartAuthentication" to="AuthenticationSetup" />
        <transition on="UpdateSecurityParameters" to="UpdateSecurityParameters" />
    </subflow-state>

    <action-state id="UpdateSecurityParameters">
        <evaluate expression="PopulateResponseSignatureSigningParameters" />
        <evaluate expression="PopulateAssertionSignatureSigningParameters" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="BuildResponse" />
    </action-state>

    <action-state id="BuildResponse">
        <evaluate expression="UpdateSAMLSelfEntityContext" />
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />

        <evaluate expression="AddAuthenticationStatementToAssertion" />
        <evaluate expression="AddAttributeStatementToAssertion" />
        <evaluate expression="AddNameIdentifierToSubjects" />
        <evaluate expression="AddSubjectConfirmationToSubjects" />
        <evaluate expression="AddNotBeforeConditionToAssertions" />
        <evaluate expression="AddNotOnOrAfterConditionToAssertions" />
        <evaluate expression="AddAudienceRestrictionToAssertions" />
        <evaluate expression="SignAssertions" />

        <evaluate expression="PostAssertionPopulateAuditContext" />
        <evaluate expression="PostResponsePopulateAuditContext" />

        <evaluate expression="UpdateSessionWithSPSession" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageSaveContext" />
        <!-- Mask storage failure. -->
        <transition on="InputOutputError" to="PopulateClientStorageSaveContext" />
    </action-state>

    <!-- We may need to save client storage. -->
    
    <action-state id="PopulateClientStorageSaveContext">
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
    </action-state>
    
    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ReturnToParentFlow"/>
        <transition to="HandleErrorWithView" />
    </subflow-state>

    <!-- Outbound message handling completes in the parent flow. -->

    <!-- Error Response Generation -->

    <decision-state id="HandleError">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.ensureSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext)).setRequestContext(flowRequestContext)" />
            <evaluate expression="LogEvent" />
        </on-entry>
        <if test="LocalErrorPredicate.test(opensamlProfileRequestContext)"
            then="HandleErrorWithView" else="HandleErrorWithResponse" />
    </decision-state>

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleErrorWithResponse">
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        <evaluate expression="PostResponsePopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <!-- Splice in an additional step to write out the F-TICKS log entry on a successful completion. -->

    <end-state id="end">
        <on-entry>
            <evaluate expression="WriteFTICKSLog" />
        </on-entry>
    </end-state>

    <bean-import resource="classpath:/net/shibboleth/idp/flows/saml/saml1/sso-abstract-beans.xml" />

</flow>
