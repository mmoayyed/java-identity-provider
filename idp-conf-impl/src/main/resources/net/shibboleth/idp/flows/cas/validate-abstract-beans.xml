<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize">

    <util:constant id="shibboleth.metrics.ProfileCounter"
        static-field="net.shibboleth.idp.cas.config.ValidateConfiguration.PROFILE_COUNTER" />


    <!-- Action beans -->
    <bean id="InitializeProfileRequestContext"
          class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext" scope="prototype"
          p:profileId="#{T(net.shibboleth.idp.cas.config.ValidateConfiguration).PROFILE_ID}"
          p:loggingId="%{idp.service.logging.cas:SSO}"
          p:browserProfile="false" />

    <bean id="InitializeValidate"
          class="net.shibboleth.idp.cas.flow.impl.InitializeValidateAction" scope="prototype" />

    <bean id="ValidateTicket"
          class="net.shibboleth.idp.cas.flow.impl.ValidateTicketAction" scope="prototype"
          c:ticketService="#{getObject('shibboleth.CASTicketService') ?: getObject('shibboleth.DefaultCASTicketService')}" />

    <bean id="ValidateRenew"
          class="net.shibboleth.idp.cas.flow.impl.ValidateRenewAction" scope="prototype" />

    <bean id="CheckProxyAuthorization"
          class="net.shibboleth.idp.cas.flow.impl.CheckProxyAuthorizationAction" scope="prototype" />

    <bean id="ValidateProxyCallback"
          class="net.shibboleth.idp.cas.flow.impl.ValidateProxyCallbackAction" scope="prototype"
          c:validator="#{getObject('shibboleth.CASProxyAuthenticator') ?: getObject('shibboleth.DefaultCASProxyAuthenticator')}"
          c:ticketService="#{getObject('shibboleth.CASTicketService') ?: getObject('shibboleth.DefaultCASTicketService')}" />

    <bean id="PopulateConsentInterceptContext"
            class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
            p:availableFlows="#{@'shibboleth.ProfileInterceptorFlowDescriptorManager'.getComponents()}"
            p:loggingLabel="backchannel">
        <property name="activeFlowsLookupStrategy">
            <bean parent="shibboleth.Functions.Constant" c:target="#{ {'attribute-release-query' } }" />
        </property>
    </bean>

    <bean id="PrepareTicketValidationResponse"
          class="net.shibboleth.idp.cas.flow.impl.PrepareTicketValidationResponseAction" scope="prototype"
          p:transcoderRegistry-ref="shibboleth.AttributeRegistryService" />

    <bean id="UpdateIdPSessionWithSPSession"
          class="net.shibboleth.idp.cas.flow.impl.UpdateIdPSessionWithSPSessionAction" scope="prototype"
          c:lifetime="%{idp.session.defaultSPlifetime:PT2H}"
          c:resolver-ref="shibboleth.SessionManager" />

    <bean id="PopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
          p:fieldExtractors="#{getObject('shibboleth.CASValidationAuditExtractors') ?: getObject('shibboleth.DefaultCASValidationAuditExtractors')}" />

    <bean id="ValidateConfigLookup"
          class="net.shibboleth.idp.cas.config.ConfigLookupFunction"
          c:clazz="net.shibboleth.idp.cas.config.ValidateConfiguration" />

    <!-- Supplementary beans -->
    <bean id="PrincipalLookupFunction" class="net.shibboleth.idp.cas.ticket.TicketPrincipalLookupFunction" />
    
</beans>