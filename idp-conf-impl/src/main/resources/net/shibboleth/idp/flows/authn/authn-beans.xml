<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean id="PotentialFlowsLookup" parent="shibboleth.ContextFunctions.Expression"
        p:customObject-ref="shibboleth.AuthenticationFlowDescriptorManager"
        c:outputType="#{T(java.util.Collection)}"
        c:expression="#input.getSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext)).getRequestContext().getFlowScope().get('potentialFlows') ?:
            #custom.getComponents().?[id matches 'authn/(' + '%{idp.authn.flows:Password}'.trim() + ')']" />
    
    <bean id="PopulateAuthenticationContext"
        class="net.shibboleth.idp.authn.impl.PopulateAuthenticationContext" scope="prototype"
        p:availableFlows="#{@'shibboleth.AuthenticationFlowDescriptorManager'.getComponents()}"
        p:potentialFlowsLookupStrategy-ref="PotentialFlowsLookup"
        p:principalEvalPredicateFactoryRegistry-ref="shibboleth.AuthnComparisonRegistry"
        p:fixedEventLookupStrategy="#{getObject('shibboleth.FixedAuthenticationEventStrategy')}" />

    <bean id="PopulateSessionContext"
        class="net.shibboleth.idp.session.impl.PopulateSessionContext" scope="prototype"
        p:activationCondition="%{idp.session.enabled:true}"
        p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier"
        p:sessionResolver-ref="shibboleth.SessionManager"
        p:addressLookupStrategy="#{getObject('shibboleth.SessionAddressLookupStrategy')}" />
    
    <bean id="SetRPUIInformation"
            class="net.shibboleth.idp.ui.impl.SetRPUIInformation" scope="prototype"
            p:activationCondition="%{idp.authn.rpui:true}"
            p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier">
        <property name="fallbackLanguages">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.ui.fallbackLanguages:}'.trim()}" />
        </property>
    </bean>
    
    <bean id="ExtractActiveAuthenticationResults"
        class="%{idp.session.activeResultExtraction:net.shibboleth.idp.session.impl.ExtractActiveAuthenticationResults}"
        scope="prototype" />

    <bean id="InitializeRequestedPrincipalContext"
        class="net.shibboleth.idp.authn.impl.InitializeRequestedPrincipalContext" scope="prototype"
        p:replaceExistingContext="%{idp.authn.overrideRequestedAuthnContext:false}" />

    <bean id="FilterFlowsByForcedAuthn"
        class="net.shibboleth.idp.authn.impl.FilterFlowsByForcedAuthn" scope="prototype" />
    
    <bean id="FilterFlowsByNonBrowserSupport"
        class="net.shibboleth.idp.authn.impl.FilterFlowsByNonBrowserSupport" scope="prototype" />

    <bean id="SelectAuthenticationFlow"
        class="net.shibboleth.idp.authn.impl.SelectAuthenticationFlow" scope="prototype"
        p:favorSSO="%{idp.authn.favorSSO:false}" />
    
    <bean id="PopulateSubjectCanonicalizationContext"
        class="net.shibboleth.idp.authn.impl.PopulateSubjectCanonicalizationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.PostLoginSubjectCanonicalizationFlows" />
    
    <bean id="DetectIdentitySwitch"
        class="net.shibboleth.idp.session.impl.DetectIdentitySwitch" scope="prototype"
        p:activationCondition="%{idp.session.enabled:true}"
        p:sessionManager-ref="shibboleth.SessionManager" />
    
    <bean id="IdentitySwitchIsError" class="java.lang.Boolean">
        <constructor-arg value="%{idp.authn.identitySwitchIsError:false}" type="boolean" />
    </bean>
    
    <bean id="FinalizeAuthentication"
        class="net.shibboleth.idp.authn.impl.FinalizeAuthentication" scope="prototype" />
    
    <bean id="UpdateSessionWithAuthenticationResult"
        class="net.shibboleth.idp.session.impl.UpdateSessionWithAuthenticationResult" scope="prototype"
        p:activationCondition="%{idp.session.enabled:true}"
        p:sessionManager-ref="shibboleth.SessionManager" />
    
</beans>
