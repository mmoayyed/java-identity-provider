<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize">

    <util:constant id="shibboleth.metrics.ProfileCounter"
        static-field="net.shibboleth.idp.cas.config.LoginConfiguration.PROFILE_COUNTER" />

    <!-- Action beans -->
    <bean id="InitializeProfileRequestContext"
          class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext" scope="prototype"
          p:profileId="#{T(net.shibboleth.idp.cas.config.LoginConfiguration).PROFILE_ID}"
          p:loggingId="%{idp.service.logging.cas:SSO}"
          p:browserProfile="true" />

    <bean id="PopulateUserAgentContext"
          class="net.shibboleth.idp.profile.impl.PopulateUserAgentContext" scope="prototype"
          p:httpServletRequestSupplier-ref="shibboleth.HttpServletRequestSupplier" />

    <bean id="PopulateClientStorageLoadContext"
          class="org.opensaml.storage.impl.client.PopulateClientStorageLoadContext" scope="prototype"
          p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

    <bean id="PopulateClientStorageSaveContext"
          class="org.opensaml.storage.impl.client.PopulateClientStorageSaveContext" scope="prototype"
          p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

    <bean id="InitializeLogin"
          class="net.shibboleth.idp.cas.flow.impl.InitializeLoginAction" scope="prototype"/>

    <bean id="BuildAuthenticationContext"
          class="net.shibboleth.idp.cas.flow.impl.BuildAuthenticationContextAction" scope="prototype" />

    <bean id="GrantServiceTicket"
          class="net.shibboleth.idp.cas.flow.impl.GrantServiceTicketAction" scope="prototype"
          c:ticketService="#{getObject('shibboleth.CASTicketService') ?: getObject('shibboleth.DefaultCASTicketService')}" />

    <bean id="LoginConfigLookup"
          class="net.shibboleth.idp.cas.config.ConfigLookupFunction" scope="prototype"
          c:clazz="net.shibboleth.idp.cas.config.LoginConfiguration" />

    <bean id="PopulatePostAuthnInterceptContext"
          class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
          p:availableFlows="#{@'shibboleth.ProfileInterceptorFlowDescriptorManager'.getComponents()}"
          p:loggingLabel="post-authn">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="PopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
          p:fieldExtractors="#{getObject('shibboleth.CASLoginAuditExtractors') ?: getObject('shibboleth.DefaultCASLoginAuditExtractors')}" />

    <!-- Supplementary beans -->
    <bean id="SessionContextLookup"
          class="org.opensaml.messaging.context.navigate.ChildContextLookup"
          c:type="net.shibboleth.idp.session.context.SessionContext" />

    <bean id="PrincipalLookupFunction" parent="shibboleth.Functions.Compose">
        <constructor-arg name="g">
            <bean class="net.shibboleth.idp.session.context.navigate.SessionContextPrincipalLookupFunction" />
        </constructor-arg>
        <constructor-arg name="f" ref="SessionContextLookup" />
    </bean>
    
</beans>